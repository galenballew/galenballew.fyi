{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/tl-dr-kubernetes-up-running-part-3","result":{"data":{"post":{"__typename":"MdxPost","slug":"/tl-dr-kubernetes-up-running-part-3","title":"TL;DR - Kubernetes Up & Running, Part 3","date":"09/12/2019","tags":[{"name":"gcp","slug":"gcp"},{"name":"cloud","slug":"cloud"},{"name":"k8s","slug":"k-8-s"},{"name":"aws","slug":"aws"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TL;DR - Kubernetes Up & Running, Part 3\",\n  \"date\": \"2019-09-12T00:00:00.000Z\",\n  \"excerpt\": \"How deep it goes, no one knows.\",\n  \"categories\": [\"tldr\", \"cloud\"],\n  \"tags\": [\"gcp\", \"cloud\", \"k8s\", \"aws\"],\n  \"featured_image\": \"/images/feature/5.jpg\",\n  \"comments\": true,\n  \"share\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Abstract\"), mdx(\"p\", null, \"These are my notes from reading \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://smile.amazon.com/Kubernetes-Running-Dive-Future-Infrastructure/dp/1491935677\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Kubernetes Up & Running\")), \" by Kelsey Hightower, Brendan Burns, and Joe Beda. Kelsey Hightower is a Staff Developer Advocate for the Google Cloud Platform. Brendan Burns is a Distinguished Engineer in Microsoft Azure and cofounded the Kubernetes project at Google. Joe Beda is the CTO of Heptio and cofounded the Kubernetes project, as well as Google Compute Engine.  \"), mdx(\"p\", null, \"This is a phenomenal book that covers both the whys and hows of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/\"\n  }), \"Kubernetes\"), \". I read the 1st edition, but a 2nd edition is coming out soon. I'm using this as study material for my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cncf.io/certification/ckad/\"\n  }), \"CKAD\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://training.linuxfoundation.org/certification/certified-kubernetes-administrator-cka/\"\n  }), \"CKA\"), \" certifications.  \"), mdx(\"p\", null, \"This article is part of a series. You can read \", \"[Part 1]\", \"({{ site.baseurl }}{% link _posts/2019-09-08-kuar-part1.md %}) and \", \"[Part 2]\", \"({{ site.baseurl }}{% link _posts/2019-09-09-kuar-part2.md %})\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Chapter 9: DaemonSets\"), mdx(\"p\", null, \"The Pods deployed by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReplicaSet\"), \" are completely decoupled from the node they are running on - the pods can run anywhere and/or multiple Pods can be on the same node. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DaemonSet\"), \" is distinctly different in that it it places a Pod onto every node in the cluster (or a subset of nodes). The Pods managed by a DaemonSet are usually landing some sort of agent or daemon onto the node. They are not traditional serving applications (like ReplicaSet Pods), but instead augment the capabilities of the cluster itself. By defining DaemonSets in declarative configuration, we can be sure that Pods are running on all of the proper nodes, even in an autoscaling cluster where nodes from and go freely.  \"), mdx(\"p\", null, \"Which nodes a DaemonSet runs on in a cluster is defined in the DaemonSet spec using labels. It's possible to select a subset of nodes. Common use cases for this are selecting nodes with certain hardware (e.g., GPUs or SSDs). In order to do this, nodes must be properly labeled. Here is an example command to label a node: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ kubectl label nodes galens-awesome-node-123 gpu=true\"), \". This label can now be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodeSelector\"), \" field of the DaemonSet spec. Because DaemonSets manage Pods using a reconciliation loop, if any required labels are removed from a node, the DaemonSet Pods will also be removed. Similar to a ReplicaSet, if a DaemonSet is deleted, its Pods will be deleted as well unless you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--cascade=false\"), \".  \"), mdx(\"p\", null, \"Prior to Kubernetes version 1.6, updating DaemonSets required updating the declarative configuration for the the DaemonSet and then performing a rolling delete of each Pod, or deleting the entire DaemonSet and redeploying. While the latter is much simpler, the drawback is downtime. A rolling delete/update can be performed using the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"PODS=$(kubectl get pods -o jsonpath -template='{.items[*]metadata.name}')\\nfor x in $PODS; do\\n  kubectl delete pods ${x}\\n  sleep 60 #delete one pod every 60 seconds\\ndone\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" method is still the default update strategy for DaemonSets in order to support backwards compatibility. However, newer versions of Kubernetes now support a rolling update strategy similar to Deployments. You will need to configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.updateStrategy.type\"), \" field of the DaemonSet to have the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RollingUpdate\"), \". Any changes to the DaemonSet \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.template\"), \" field or subfields will trigger a rolling update. Rolling updates come with two additional parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spec.minReadySeconds\"), \", determines how long a Pod's status must be \\\"ready\\\" before moving onto the next Pod  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spec.updateStrategy.rollingUpdate.maxUnavailable\"), \", how many Pods can be being updated simultaneously\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"It's best practice to set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spec.minReadySeconds\"), \" to something like 30-60 seconds to ensure that Pods are truly healthy before proceeding. Setting \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spec.updateStrategy.rollingUpdate.maxUnavailable\"), \" to 1 is the safest value, but depending on the size of the application and cluster, can result in long rollouts. Increasing the value increases the blast radius for a failed rollout. It's best practice to set the value low and only increase it if users or admins complain about rollout speed.  \")), mdx(\"hr\", null), mdx(\"h2\", null, \"Chapter 10: Jobs\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Jobs\"), \" are used to run short-lived, one-off tasks. They create and manage Pods that run until successful termination (i.e., exit with 0). If a Pod fails before successful termination, the Job controller will create another one from the Pod template in the Job spec. When a Job completes, the Job and related Pod are still around. You will need to provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-a\"), \" flag in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl\"), \" to see completed Jobs. Jobs can be created both imperatively and declaratively. Both options will use the parameter/field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restartPolicy\"), \". It is recommended to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restartPolicy=OnFailure\"), \" so that Pods are recreated in place. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restartPolicy=Never\"), \" will create an entirely new Pod after each failure and can lead to a lot of \\\"junk\\\". It's not uncommon for a bug to cause a Pod to crash as soon as it starts. This behavior is monitored by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubelet\"), \" on the node and will set the Pod status to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CrashLoopBackOff\"), \" without the Job controller doing anything. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CrashLoopBackOff\"), \" delays the Pod from being recreated to avoid eating resources on the node. Pods can also appear healthy, but be deadlocked. Jobs support liveness probes to determine Pod health in these situations.  \"), mdx(\"p\", null, \"Jobs have 2 major parameters that control their behavior, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"completions\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parallelism\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parallelism\"), \" determines how many copies of a Pods to spin up at once. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"completions\"), \" determines the number of successful exits before a Job stops running. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"completions\"), \" is left unset, the Job will be put into a worker pool mode. Once the first Pod exits successfully, the Job will start winding down and not add any new Pods. This means that none of the workers should exit until the work is done and they are all in the process of finishing up.  \"), mdx(\"hr\", null), mdx(\"h2\", null, \"Chapter 11: ConfigMaps and Secrets\"), mdx(\"p\", null, \"We want to make our container images as reusable and portable as possible. In order to do this, we need to be able to configure them at runtime so that the application runs properly according to its environment. This is where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfigMaps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Secrets\"), \" come in handy. In essence, both ConfigMaps and Secrets provide key-value pairs to containers right before they are run.\"), mdx(\"p\", null, \"There are 3 main ways to use a ConfigMap:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Filesystem\"), \": the ConfigMap is mounted as a volume in the container. A file is created for each key-pair based on the key name. The contents of the file are set to the value.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Environment variable\"), \": Set an environment variable \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$KEY=VALUE\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Command-line argument\"), \": Reference environment variables in command-line.  \")), mdx(\"p\", null, \"Because key names for both ConfigMaps and Secrets are designed to be able to map to valid environment variable names, they have appropriate naming constraints. If a ConfigMap or Secret is updated, the new information becomes available to the application without restarting. However, this means your application must be written to reread its configuration values. Currently, there is no built-in way to signal an application when a new version of a ConfigMap or Secret is deployed. ConfigMap values are UTF-8 text, where as Secret values can hold arbitrary data encoded in base64, which makes it possible to store binary data. However, this makes it much more difficult to manage secrets stored in YAML files.\"), mdx(\"p\", null, \"Secrets can be consumed via the k8s API, or more preferably via a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"secrets volume\"), \". Secrets volumes are managed by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubelet\"), \" and store secrets on tmpfs volumes - the secret is never written to disk on nodes. There is a special use case for secrets to access private Docker registries that is supported via \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"image pull secrets.\"), \" These are consumed just like regular secrets, but are declared in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.imagePullSecret\"), \" field of the Pod manifest. \"), mdx(\"hr\", null), mdx(\"h1\", null, \"Resources:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Kubernetes Up & Running\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/kubernetes-up-and-running\"\n  }), \"GitHub repository\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Continue Reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[Part 1]\", \"({{ site.baseurl }}{% link _posts/2019-09-08-kuar-part1.md %})\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[Part 2]\", \"({{ site.baseurl }}{% link _posts/2019-09-09-kuar-part2.md %})\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[Part 3]\", \"({{ site.baseurl }}{% link _posts/2019-09-12-kuar-part3.md %})\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[Part 4]\", \"({{ site.baseurl }}{% link _posts/2019-09-15-kuar-part4.md %})\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"How deep it goes, no one knows.","timeToRead":4,"banner":null}},"pageContext":{"slug":"/tl-dr-kubernetes-up-running-part-3","formatString":"MM/DD/YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}