{"expireTime":9007200864531304000,"key":"gatsby-plugin-mdx-entire-payload-c843347177550100e0eecfd547a124fa-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":22,"offset":22},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":22,"offset":22},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#abstract","children":[{"type":"text","value":"Abstract","position":{"start":{"line":3,"column":4,"offset":26},"end":{"line":3,"column":12,"offset":34},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":25},"end":{"line":3,"column":24,"offset":46},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":25},"end":{"line":3,"column":24,"offset":46},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":24,"offset":46},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#setting-up-a-basic-service","children":[{"type":"text","value":"Setting Up a Basic Service","position":{"start":{"line":4,"column":4,"offset":50},"end":{"line":4,"column":30,"offset":76},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":49},"end":{"line":4,"column":60,"offset":106},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":49},"end":{"line":4,"column":60,"offset":106},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":47},"end":{"line":4,"column":60,"offset":106},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#developer-workflows","children":[{"type":"text","value":"Developer Workflows","position":{"start":{"line":5,"column":4,"offset":110},"end":{"line":5,"column":23,"offset":129},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":109},"end":{"line":5,"column":46,"offset":152},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":109},"end":{"line":5,"column":46,"offset":152},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":107},"end":{"line":5,"column":46,"offset":152},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#telemetry","children":[{"type":"text","value":"Monitoring and Logging in Kubernetes","position":{"start":{"line":6,"column":4,"offset":156},"end":{"line":6,"column":40,"offset":192},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":155},"end":{"line":6,"column":53,"offset":205},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":155},"end":{"line":6,"column":53,"offset":205},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":153},"end":{"line":6,"column":53,"offset":205},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#configuration-secrets-and-rbac","children":[{"type":"text","value":"Configuration, Secrets, and RBAC","position":{"start":{"line":7,"column":4,"offset":209},"end":{"line":7,"column":36,"offset":241},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":208},"end":{"line":7,"column":70,"offset":275},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":208},"end":{"line":7,"column":70,"offset":275},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":206},"end":{"line":7,"column":70,"offset":275},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#cicd","children":[{"type":"text","value":"Continuous Integration, Testing, and Deployment","position":{"start":{"line":8,"column":4,"offset":279},"end":{"line":8,"column":51,"offset":326},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":278},"end":{"line":8,"column":59,"offset":334},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":278},"end":{"line":8,"column":59,"offset":334},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":276},"end":{"line":8,"column":59,"offset":334},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#versioning-releases-and-rollouts","children":[{"type":"text","value":"Versioning, Releases, and Rollouts","position":{"start":{"line":9,"column":4,"offset":338},"end":{"line":9,"column":38,"offset":372},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":337},"end":{"line":9,"column":74,"offset":408},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":337},"end":{"line":9,"column":74,"offset":408},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":335},"end":{"line":9,"column":74,"offset":408},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#distribution-and-staging","children":[{"type":"text","value":"Worldwide Application Distribution and Staging","position":{"start":{"line":10,"column":4,"offset":412},"end":{"line":10,"column":50,"offset":458},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":411},"end":{"line":10,"column":78,"offset":486},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":411},"end":{"line":10,"column":78,"offset":486},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":409},"end":{"line":10,"column":78,"offset":486},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#resource-management","children":[{"type":"text","value":"Resource Management","position":{"start":{"line":11,"column":4,"offset":490},"end":{"line":11,"column":23,"offset":509},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":489},"end":{"line":11,"column":46,"offset":532},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":489},"end":{"line":11,"column":46,"offset":532},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":487},"end":{"line":11,"column":46,"offset":532},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#networking","children":[{"type":"text","value":"Networking, Network Security, and Service Mesh","position":{"start":{"line":12,"column":4,"offset":536},"end":{"line":12,"column":50,"offset":582},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":535},"end":{"line":12,"column":64,"offset":596},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":535},"end":{"line":12,"column":64,"offset":596},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":533},"end":{"line":12,"column":64,"offset":596},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":12,"column":64,"offset":596},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":14,"column":1,"offset":598},"end":{"line":14,"column":4,"offset":601},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"abstract\">","position":{"start":{"line":15,"column":5,"offset":606},"end":{"line":15,"column":24,"offset":625},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":15,"column":24,"offset":625},"end":{"line":15,"column":28,"offset":629},"indent":[]}},{"type":"link","title":null,"url":"#abstract","children":[{"type":"text","value":"Abstract","position":{"start":{"line":15,"column":29,"offset":630},"end":{"line":15,"column":37,"offset":638},"indent":[]}}],"position":{"start":{"line":15,"column":28,"offset":629},"end":{"line":15,"column":49,"offset":650},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":602},"end":{"line":15,"column":49,"offset":650},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.oreilly.com/library/view/kubernetes-best-practices/9781492056461/","children":[{"type":"text","value":"Kubernetes Best Practices","position":{"start":{"line":16,"column":2,"offset":652},"end":{"line":16,"column":27,"offset":677},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":651},"end":{"line":16,"column":107,"offset":757},"indent":[]}},{"type":"text","value":" was authored by Brendan Burns, Eddie Villalba, Dave Strebel, and Lachlan Evenson. These are the working notes that I took while reading the book. I have a solid working knowledge of Kubernetes and did not seek to regurgitate everything I read. Instead, I hope that this article consists of the juiciest tid bits and highlights that are easily consumable for anyone familiar with k8s. Enjoy! ","position":{"start":{"line":16,"column":107,"offset":757},"end":{"line":16,"column":499,"offset":1149},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":651},"end":{"line":16,"column":499,"offset":1149},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":18,"column":1,"offset":1151},"end":{"line":18,"column":4,"offset":1154},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"setting-up-a-basic-service\">","position":{"start":{"line":19,"column":5,"offset":1159},"end":{"line":19,"column":42,"offset":1196},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":19,"column":42,"offset":1196},"end":{"line":19,"column":46,"offset":1200},"indent":[]}},{"type":"link","title":null,"url":"#setting-up-a-basic-service","children":[{"type":"text","value":"Setting Up a Basic Service","position":{"start":{"line":19,"column":47,"offset":1201},"end":{"line":19,"column":73,"offset":1227},"indent":[]}}],"position":{"start":{"line":19,"column":46,"offset":1200},"end":{"line":19,"column":103,"offset":1257},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1155},"end":{"line":19,"column":103,"offset":1257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Kubernetes starts with containers - immutable containers to be specific. Do not use the ","position":{"start":{"line":20,"column":1,"offset":1258},"end":{"line":20,"column":89,"offset":1346},"indent":[]}},{"type":"inlineCode","value":"latest","position":{"start":{"line":20,"column":89,"offset":1346},"end":{"line":20,"column":97,"offset":1354},"indent":[]}},{"type":"text","value":" tag for your image versions. Instead, use a combination of semantic versioning and the SHA hash of the commit where the image was built (e.g., v1.0.1-bfeda01f).","position":{"start":{"line":20,"column":97,"offset":1354},"end":{"line":20,"column":258,"offset":1515},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1258},"end":{"line":20,"column":258,"offset":1515},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's recommended to set a container's Requests and Limits are set equal to each other. This results in very predictable pod behavior, as well as predictable utilization. You can certainly set the values for Requests and Limits independently in order to drive maximal utilization, but most users find that the stability/predictability from setting them equal is more valuable than the gained utilization. ","position":{"start":{"line":22,"column":1,"offset":1517},"end":{"line":22,"column":405,"offset":1921},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1517},"end":{"line":22,"column":405,"offset":1921},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The key/values in a ConfigMap are subject to change. When a key/value needs to be updated, it may be tempting to edit the ConfigMap\nYAML and apply the update in-place. However, this will not trigger an update to existing Pods using the ConfigMap - they will only use the new configuration after a restart. Rather than updating the existing ConfigMap, adding version numbers to your ConfigMaps, deploying an entirely new ConfigMap, and updating the Deployment to use this new one. Rollout of the new configuration will be automatically triggered. Additionally, the previous version of the ConfigMap will still be available in the cluster - rollback is just a matter of updating the Deployment again. ","position":{"start":{"line":24,"column":1,"offset":1923},"end":{"line":25,"column":568,"offset":2622},"indent":[1]}}],"position":{"start":{"line":24,"column":1,"offset":1923},"end":{"line":25,"column":568,"offset":2622},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Secrets are stored unencrypted within etcd. If you want to protect that sensitive data from a direct attack against etcd, you can provide Kubernetes with a key that it will use to encrypt the data at rest. There's more information available ","position":{"start":{"line":27,"column":1,"offset":2624},"end":{"line":27,"column":242,"offset":2865},"indent":[]}},{"type":"link","title":null,"url":"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/","children":[{"type":"text","value":"in the documentation.","position":{"start":{"line":27,"column":243,"offset":2866},"end":{"line":27,"column":264,"offset":2887},"indent":[]}}],"position":{"start":{"line":27,"column":242,"offset":2865},"end":{"line":27,"column":332,"offset":2955},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2624},"end":{"line":27,"column":332,"offset":2955},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generally speaking, managing state is hard. Also, generally speaking, stateful services (e.g., Redis as a service) are worth the extra cost. The book doesn't offer any additional information or opinions beyond this, but there is an excellent ","position":{"start":{"line":29,"column":1,"offset":2957},"end":{"line":29,"column":243,"offset":3199},"indent":[]}},{"type":"link","title":null,"url":"https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-mapping-external-services","children":[{"type":"text","value":"blog article","position":{"start":{"line":29,"column":244,"offset":3200},"end":{"line":29,"column":256,"offset":3212},"indent":[]}}],"position":{"start":{"line":29,"column":243,"offset":3199},"end":{"line":29,"column":353,"offset":3309},"indent":[]}},{"type":"text","value":" by Google about mapping to external services. The book has an entire chapter on ","position":{"start":{"line":29,"column":353,"offset":3309},"end":{"line":29,"column":434,"offset":3390},"indent":[]}},{"type":"link","title":null,"url":"#integrating-external-services-and-kubernetes","children":[{"type":"text","value":"integrating external services","position":{"start":{"line":29,"column":435,"offset":3391},"end":{"line":29,"column":464,"offset":3420},"indent":[]}}],"position":{"start":{"line":29,"column":434,"offset":3390},"end":{"line":29,"column":512,"offset":3468},"indent":[]}},{"type":"text","value":", as well as a chapter on ","position":{"start":{"line":29,"column":512,"offset":3468},"end":{"line":29,"column":538,"offset":3494},"indent":[]}},{"type":"link","title":null,"url":"#managing-state-and-stateful-applications","children":[{"type":"text","value":"managing state and stateful applications!","position":{"start":{"line":29,"column":539,"offset":3495},"end":{"line":29,"column":580,"offset":3536},"indent":[]}}],"position":{"start":{"line":29,"column":538,"offset":3494},"end":{"line":29,"column":624,"offset":3580},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2957},"end":{"line":29,"column":624,"offset":3580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Even if you're an individual developer, you will eventually want your k8s configuration yaml to be deployed to multiple, different endpoints (e.g., dev, stage, prod). Rather than having multiple copies of the same code, you should use a packing tool like ","position":{"start":{"line":31,"column":1,"offset":3582},"end":{"line":31,"column":256,"offset":3837},"indent":[]}},{"type":"link","title":null,"url":"https://helm.sh/","children":[{"type":"text","value":"Helm","position":{"start":{"line":31,"column":257,"offset":3838},"end":{"line":31,"column":261,"offset":3842},"indent":[]}}],"position":{"start":{"line":31,"column":256,"offset":3837},"end":{"line":31,"column":280,"offset":3861},"indent":[]}},{"type":"text","value":" to parametrize your configuration. Instead of having multiple copies of application YAML, you can have a single ","position":{"start":{"line":31,"column":280,"offset":3861},"end":{"line":31,"column":393,"offset":3974},"indent":[]}},{"type":"inlineCode","value":"values.yaml","position":{"start":{"line":31,"column":393,"offset":3974},"end":{"line":31,"column":406,"offset":3987},"indent":[]}},{"type":"text","value":" per deployment environment and you can keep them all in a ","position":{"start":{"line":31,"column":406,"offset":3987},"end":{"line":31,"column":465,"offset":4046},"indent":[]}},{"type":"inlineCode","value":"templates/","position":{"start":{"line":31,"column":465,"offset":4046},"end":{"line":31,"column":477,"offset":4058},"indent":[]}},{"type":"text","value":" directory at the root of your project. The book doesn't talk about it, but this also gives you the added benefit of building modular, reusable k8s building blocks. These can be shared and leveraged across the company so that teams don't need to reinvent the wheel. ","position":{"start":{"line":31,"column":477,"offset":4058},"end":{"line":31,"column":743,"offset":4324},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3582},"end":{"line":31,"column":743,"offset":4324},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":33,"column":1,"offset":4326},"end":{"line":33,"column":4,"offset":4329},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"developer-workflows\">","position":{"start":{"line":34,"column":5,"offset":4334},"end":{"line":34,"column":35,"offset":4364},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":34,"column":35,"offset":4364},"end":{"line":34,"column":39,"offset":4368},"indent":[]}},{"type":"link","title":null,"url":"#developer-workflows","children":[{"type":"text","value":"Developer Workflows","position":{"start":{"line":34,"column":40,"offset":4369},"end":{"line":34,"column":59,"offset":4388},"indent":[]}}],"position":{"start":{"line":34,"column":39,"offset":4368},"end":{"line":34,"column":82,"offset":4411},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":4330},"end":{"line":34,"column":82,"offset":4411},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When thinking about developer interactions with a development cluster, it can be useful to break it down into three phases:","position":{"start":{"line":35,"column":1,"offset":4412},"end":{"line":35,"column":124,"offset":4535},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":4412},"end":{"line":35,"column":124,"offset":4535},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Onboarding - getting access to the cluster","position":{"start":{"line":36,"column":4,"offset":4539},"end":{"line":36,"column":46,"offset":4581},"indent":[]}}],"position":{"start":{"line":36,"column":4,"offset":4539},"end":{"line":36,"column":46,"offset":4581},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4536},"end":{"line":36,"column":46,"offset":4581},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Developing - getting bootstrapped and able to deploy","position":{"start":{"line":37,"column":4,"offset":4585},"end":{"line":37,"column":56,"offset":4637},"indent":[]}}],"position":{"start":{"line":37,"column":4,"offset":4585},"end":{"line":37,"column":56,"offset":4637},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":4582},"end":{"line":37,"column":56,"offset":4637},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Testing - being able to iterate quickly and efficiently","position":{"start":{"line":38,"column":4,"offset":4641},"end":{"line":38,"column":59,"offset":4696},"indent":[]}}],"position":{"start":{"line":38,"column":4,"offset":4641},"end":{"line":38,"column":59,"offset":4696},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":4638},"end":{"line":38,"column":59,"offset":4696},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4536},"end":{"line":38,"column":59,"offset":4696},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Generally speaking, it's a best practice to use a single, large cluster for all developers and break it down into namespaces to keep things tidy. There is some additional overhead of managing this cluster as opposed to creating individual clusters per developer, but the increased resource utilization and availability of shared services (e.g., logging) make it worthwhile. When you're operating in this model, it is also a good idea to give everyone read access to the entire cluster. This can help everyone debug in case your neighbor is breaking your deployment or hogging all the resources. However, it's worth noting that the default read access will include Secrets. You can create fine-grain permissions that exclude Secrets if necessary, but it's usually not a problem in a development environment. ","position":{"start":{"line":40,"column":1,"offset":4698},"end":{"line":40,"column":808,"offset":5505},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4698},"end":{"line":40,"column":808,"offset":5505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It can be extremely useful to automate as much of the namespace management as possible. This could be a script that creates a new namespace, adds users to it, defines the Requests and Limits, and sets a TTL. The idea of a TTL is useful because it helps keep the cluster lean and clean (and helps build good developer habits). You can enforce the TTL by writing a ","position":{"start":{"line":42,"column":1,"offset":5507},"end":{"line":42,"column":364,"offset":5870},"indent":[]}},{"type":"link","title":null,"url":"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/","children":[{"type":"text","value":"CronJob","position":{"start":{"line":42,"column":365,"offset":5871},"end":{"line":42,"column":372,"offset":5878},"indent":[]}}],"position":{"start":{"line":42,"column":364,"offset":5870},"end":{"line":42,"column":443,"offset":5949},"indent":[]}},{"type":"text","value":" to clean them up. You could also replace the script that instantiates the namespace with a ","position":{"start":{"line":42,"column":443,"offset":5949},"end":{"line":42,"column":535,"offset":6041},"indent":[]}},{"type":"link","title":null,"url":"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/","children":[{"type":"text","value":"CRD","position":{"start":{"line":42,"column":536,"offset":6042},"end":{"line":42,"column":539,"offset":6045},"indent":[]}}],"position":{"start":{"line":42,"column":535,"offset":6041},"end":{"line":42,"column":627,"offset":6133},"indent":[]}},{"type":"text","value":"!","position":{"start":{"line":42,"column":627,"offset":6133},"end":{"line":42,"column":628,"offset":6134},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":5507},"end":{"line":42,"column":628,"offset":6134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If your development namespace has a TTL, then you're definitely going to want a script that installs all the necessary dependencies for your project. It is also a best practice to have a script that will delete and recreate your Deployments rather than update them in-place. In a development environment, you want your code changes to rollout quickly, but modifying the k8s rollout logic should only be done with extreme caution - you do not want to create drift between your development and production clusters. ","position":{"start":{"line":44,"column":1,"offset":6136},"end":{"line":44,"column":514,"offset":6649},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":6136},"end":{"line":44,"column":514,"offset":6649},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":46,"column":1,"offset":6651},"end":{"line":46,"column":4,"offset":6654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"telemetry\">","position":{"start":{"line":47,"column":5,"offset":6659},"end":{"line":47,"column":25,"offset":6679},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":47,"column":25,"offset":6679},"end":{"line":47,"column":29,"offset":6683},"indent":[]}},{"type":"link","title":null,"url":"#telemetry","children":[{"type":"text","value":"Monitoring and Logging in Kubernetes","position":{"start":{"line":47,"column":30,"offset":6684},"end":{"line":47,"column":66,"offset":6720},"indent":[]}}],"position":{"start":{"line":47,"column":29,"offset":6683},"end":{"line":47,"column":79,"offset":6733},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":6655},"end":{"line":47,"column":79,"offset":6733},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two monitoring paradigms that complement each other and are useful in the context of Kubernetes: ","position":{"start":{"line":48,"column":1,"offset":6734},"end":{"line":48,"column":108,"offset":6841},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"USE","position":{"start":{"line":48,"column":110,"offset":6843},"end":{"line":48,"column":113,"offset":6846},"indent":[]}}],"position":{"start":{"line":48,"column":108,"offset":6841},"end":{"line":48,"column":115,"offset":6848},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":48,"column":115,"offset":6848},"end":{"line":48,"column":120,"offset":6853},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"RED","position":{"start":{"line":48,"column":122,"offset":6855},"end":{"line":48,"column":125,"offset":6858},"indent":[]}}],"position":{"start":{"line":48,"column":120,"offset":6853},"end":{"line":48,"column":127,"offset":6860},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":48,"column":127,"offset":6860},"end":{"line":48,"column":129,"offset":6862},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":6734},"end":{"line":48,"column":129,"offset":6862},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"U","position":{"start":{"line":50,"column":5,"offset":6868},"end":{"line":50,"column":6,"offset":6869},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":6866},"end":{"line":50,"column":8,"offset":6871},"indent":[]}},{"type":"text","value":" - Utilization","position":{"start":{"line":50,"column":8,"offset":6871},"end":{"line":50,"column":22,"offset":6885},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":6866},"end":{"line":50,"column":22,"offset":6885},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6864},"end":{"line":50,"column":22,"offset":6885},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"S","position":{"start":{"line":51,"column":5,"offset":6890},"end":{"line":51,"column":6,"offset":6891},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":6888},"end":{"line":51,"column":8,"offset":6893},"indent":[]}},{"type":"text","value":" - Saturation","position":{"start":{"line":51,"column":8,"offset":6893},"end":{"line":51,"column":21,"offset":6906},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":6888},"end":{"line":51,"column":21,"offset":6906},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":6886},"end":{"line":51,"column":21,"offset":6906},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"E","position":{"start":{"line":52,"column":5,"offset":6911},"end":{"line":52,"column":6,"offset":6912},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":6909},"end":{"line":52,"column":8,"offset":6914},"indent":[]}},{"type":"text","value":" - Errors","position":{"start":{"line":52,"column":8,"offset":6914},"end":{"line":52,"column":17,"offset":6923},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":6909},"end":{"line":52,"column":17,"offset":6923},"indent":[]}},{"type":"jsx","value":"<p></p>","position":{"start":{"line":53,"column":1,"offset":6924},"end":{"line":53,"column":8,"offset":6931},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6907},"end":{"line":53,"column":8,"offset":6931},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"R","position":{"start":{"line":54,"column":5,"offset":6936},"end":{"line":54,"column":6,"offset":6937},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":6934},"end":{"line":54,"column":8,"offset":6939},"indent":[]}},{"type":"text","value":" - Rate","position":{"start":{"line":54,"column":8,"offset":6939},"end":{"line":54,"column":15,"offset":6946},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":6934},"end":{"line":54,"column":15,"offset":6946},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6932},"end":{"line":54,"column":15,"offset":6946},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"E","position":{"start":{"line":55,"column":5,"offset":6951},"end":{"line":55,"column":6,"offset":6952},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":6949},"end":{"line":55,"column":8,"offset":6954},"indent":[]}},{"type":"text","value":" - Errors","position":{"start":{"line":55,"column":8,"offset":6954},"end":{"line":55,"column":17,"offset":6963},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":6949},"end":{"line":55,"column":17,"offset":6963},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":6947},"end":{"line":55,"column":17,"offset":6963},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"D","position":{"start":{"line":56,"column":5,"offset":6968},"end":{"line":56,"column":6,"offset":6969},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":6966},"end":{"line":56,"column":8,"offset":6971},"indent":[]}},{"type":"text","value":" - Duration","position":{"start":{"line":56,"column":8,"offset":6971},"end":{"line":56,"column":19,"offset":6982},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":6966},"end":{"line":56,"column":19,"offset":6982},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6964},"end":{"line":56,"column":19,"offset":6982},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6864},"end":{"line":56,"column":19,"offset":6982},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"USE focuses more on the infrastructure, whereas RED focuses on the end-user experience for the application. These patterns should help determine what you monitor, because monitoring everything is counter-productive (poor signal:noise ratio).","position":{"start":{"line":58,"column":1,"offset":6984},"end":{"line":58,"column":242,"offset":7225},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":6984},"end":{"line":58,"column":242,"offset":7225},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rather than focusing on the details of ","position":{"start":{"line":60,"column":1,"offset":7227},"end":{"line":60,"column":40,"offset":7266},"indent":[]}},{"type":"link","title":null,"url":"https://kubernetes.io/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#the-metrics-api","children":[{"type":"text","value":"the Metrics API","position":{"start":{"line":60,"column":41,"offset":7267},"end":{"line":60,"column":56,"offset":7282},"indent":[]}}],"position":{"start":{"line":60,"column":40,"offset":7266},"end":{"line":60,"column":160,"offset":7386},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":60,"column":160,"offset":7386},"end":{"line":60,"column":162,"offset":7388},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/kubernetes-sigs/metrics-server","children":[{"type":"text","value":"Metrics Server","position":{"start":{"line":60,"column":163,"offset":7389},"end":{"line":60,"column":177,"offset":7403},"indent":[]}}],"position":{"start":{"line":60,"column":162,"offset":7388},"end":{"line":60,"column":229,"offset":7455},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":60,"column":229,"offset":7455},"end":{"line":60,"column":231,"offset":7457},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/kubernetes/kube-state-metrics","children":[{"type":"text","value":"kube-state-metrics","position":{"start":{"line":60,"column":232,"offset":7458},"end":{"line":60,"column":250,"offset":7476},"indent":[]}}],"position":{"start":{"line":60,"column":231,"offset":7457},"end":{"line":60,"column":301,"offset":7527},"indent":[]}},{"type":"text","value":", or any of the multitude of monitoring tools available (e.g., ","position":{"start":{"line":60,"column":301,"offset":7527},"end":{"line":60,"column":364,"offset":7590},"indent":[]}},{"type":"link","title":null,"url":"https://prometheus.io/docs/introduction/overview/","children":[{"type":"text","value":"Prometheus","position":{"start":{"line":60,"column":365,"offset":7591},"end":{"line":60,"column":375,"offset":7601},"indent":[]}}],"position":{"start":{"line":60,"column":364,"offset":7590},"end":{"line":60,"column":427,"offset":7653},"indent":[]}},{"type":"text","value":"), I'd like to focus on what metrics should be captured. Monitoring should take a layered approach that takes into account the following:","position":{"start":{"line":60,"column":427,"offset":7653},"end":{"line":60,"column":564,"offset":7790},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7227},"end":{"line":60,"column":564,"offset":7790},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Physical or virtual nodes","position":{"start":{"line":61,"column":3,"offset":7793},"end":{"line":61,"column":28,"offset":7818},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":7793},"end":{"line":61,"column":28,"offset":7818},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7791},"end":{"line":61,"column":28,"offset":7818},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cluster components","position":{"start":{"line":62,"column":3,"offset":7821},"end":{"line":62,"column":21,"offset":7839},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":7821},"end":{"line":62,"column":21,"offset":7839},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":7819},"end":{"line":62,"column":21,"offset":7839},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cluster add-ons","position":{"start":{"line":63,"column":3,"offset":7842},"end":{"line":63,"column":18,"offset":7857},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":7842},"end":{"line":63,"column":18,"offset":7857},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":7840},"end":{"line":63,"column":18,"offset":7857},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"End-user applications","position":{"start":{"line":64,"column":3,"offset":7860},"end":{"line":64,"column":24,"offset":7881},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":7860},"end":{"line":64,"column":24,"offset":7881},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":7858},"end":{"line":64,"column":24,"offset":7881},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7791},"end":{"line":64,"column":24,"offset":7881},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Given these layers, what metrics should be targeted?","position":{"start":{"line":66,"column":1,"offset":7883},"end":{"line":66,"column":53,"offset":7935},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7883},"end":{"line":66,"column":53,"offset":7935},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Nodes","position":{"start":{"line":67,"column":3,"offset":7938},"end":{"line":67,"column":8,"offset":7943},"indent":[]}}],"position":{"start":{"line":67,"column":3,"offset":7938},"end":{"line":67,"column":8,"offset":7943},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"CPU utilization","position":{"start":{"line":68,"column":5,"offset":7948},"end":{"line":68,"column":20,"offset":7963},"indent":[]}}],"position":{"start":{"line":68,"column":5,"offset":7948},"end":{"line":68,"column":20,"offset":7963},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7946},"end":{"line":68,"column":20,"offset":7963},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Memory utilization","position":{"start":{"line":69,"column":5,"offset":7968},"end":{"line":69,"column":23,"offset":7986},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":7968},"end":{"line":69,"column":23,"offset":7986},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":7966},"end":{"line":69,"column":23,"offset":7986},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Network utilization","position":{"start":{"line":70,"column":5,"offset":7991},"end":{"line":70,"column":24,"offset":8010},"indent":[]}}],"position":{"start":{"line":70,"column":5,"offset":7991},"end":{"line":70,"column":24,"offset":8010},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":7989},"end":{"line":70,"column":24,"offset":8010},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Disk utilization","position":{"start":{"line":71,"column":5,"offset":8015},"end":{"line":71,"column":21,"offset":8031},"indent":[]}}],"position":{"start":{"line":71,"column":5,"offset":8015},"end":{"line":71,"column":21,"offset":8031},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":8013},"end":{"line":71,"column":21,"offset":8031},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7946},"end":{"line":71,"column":21,"offset":8031},"indent":[3,3,3]}}],"position":{"start":{"line":67,"column":1,"offset":7936},"end":{"line":71,"column":21,"offset":8031},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cluster components","position":{"start":{"line":72,"column":3,"offset":8034},"end":{"line":72,"column":21,"offset":8052},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8034},"end":{"line":72,"column":21,"offset":8052},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"etcd latency","position":{"start":{"line":73,"column":5,"offset":8057},"end":{"line":73,"column":17,"offset":8069},"indent":[]}}],"position":{"start":{"line":73,"column":5,"offset":8057},"end":{"line":73,"column":17,"offset":8069},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":8055},"end":{"line":73,"column":17,"offset":8069},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":8055},"end":{"line":73,"column":17,"offset":8069},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8032},"end":{"line":73,"column":17,"offset":8069},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cluster add-ons","position":{"start":{"line":74,"column":3,"offset":8072},"end":{"line":74,"column":18,"offset":8087},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8072},"end":{"line":74,"column":18,"offset":8087},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cluster Autoscaler","position":{"start":{"line":75,"column":5,"offset":8092},"end":{"line":75,"column":23,"offset":8110},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":8092},"end":{"line":75,"column":23,"offset":8110},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":8090},"end":{"line":75,"column":23,"offset":8110},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ingress Controller","position":{"start":{"line":76,"column":5,"offset":8115},"end":{"line":76,"column":23,"offset":8133},"indent":[]}}],"position":{"start":{"line":76,"column":5,"offset":8115},"end":{"line":76,"column":23,"offset":8133},"indent":[]}}],"position":{"start":{"line":76,"column":3,"offset":8113},"end":{"line":76,"column":23,"offset":8133},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":8090},"end":{"line":76,"column":23,"offset":8133},"indent":[3]}}],"position":{"start":{"line":74,"column":1,"offset":8070},"end":{"line":76,"column":23,"offset":8133},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Application","position":{"start":{"line":77,"column":3,"offset":8136},"end":{"line":77,"column":14,"offset":8147},"indent":[]}}],"position":{"start":{"line":77,"column":3,"offset":8136},"end":{"line":77,"column":14,"offset":8147},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Container memory utilization and saturation","position":{"start":{"line":78,"column":5,"offset":8152},"end":{"line":78,"column":48,"offset":8195},"indent":[]}}],"position":{"start":{"line":78,"column":5,"offset":8152},"end":{"line":78,"column":48,"offset":8195},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":8150},"end":{"line":78,"column":48,"offset":8195},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Container CPU utilization","position":{"start":{"line":79,"column":5,"offset":8200},"end":{"line":79,"column":30,"offset":8225},"indent":[]}}],"position":{"start":{"line":79,"column":5,"offset":8200},"end":{"line":79,"column":30,"offset":8225},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":8198},"end":{"line":79,"column":30,"offset":8225},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Container network utilization and error rate","position":{"start":{"line":80,"column":5,"offset":8230},"end":{"line":80,"column":49,"offset":8274},"indent":[]}}],"position":{"start":{"line":80,"column":5,"offset":8230},"end":{"line":80,"column":49,"offset":8274},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":8228},"end":{"line":80,"column":49,"offset":8274},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Application frame-work specific metrics","position":{"start":{"line":81,"column":5,"offset":8279},"end":{"line":81,"column":44,"offset":8318},"indent":[]}}],"position":{"start":{"line":81,"column":5,"offset":8279},"end":{"line":81,"column":44,"offset":8318},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":8277},"end":{"line":81,"column":44,"offset":8318},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":8150},"end":{"line":81,"column":44,"offset":8318},"indent":[3,3,3]}}],"position":{"start":{"line":77,"column":1,"offset":8134},"end":{"line":81,"column":44,"offset":8318},"indent":[1,1,1,1]}}],"position":{"start":{"line":67,"column":1,"offset":7936},"end":{"line":81,"column":44,"offset":8318},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With regards to logging, there are several components that you will need to capture logs from:","position":{"start":{"line":83,"column":1,"offset":8320},"end":{"line":83,"column":95,"offset":8414},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":8320},"end":{"line":83,"column":95,"offset":8414},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Node logs","position":{"start":{"line":84,"column":3,"offset":8417},"end":{"line":84,"column":12,"offset":8426},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":8417},"end":{"line":84,"column":12,"offset":8426},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Docker daemon","position":{"start":{"line":85,"column":5,"offset":8431},"end":{"line":85,"column":18,"offset":8444},"indent":[]}}],"position":{"start":{"line":85,"column":5,"offset":8431},"end":{"line":85,"column":18,"offset":8444},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":8429},"end":{"line":85,"column":18,"offset":8444},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":8429},"end":{"line":85,"column":18,"offset":8444},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":8415},"end":{"line":85,"column":18,"offset":8444},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Kubernetes control-plane logs","position":{"start":{"line":86,"column":3,"offset":8447},"end":{"line":86,"column":32,"offset":8476},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":8447},"end":{"line":86,"column":32,"offset":8476},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"API server","position":{"start":{"line":87,"column":5,"offset":8481},"end":{"line":87,"column":15,"offset":8491},"indent":[]}}],"position":{"start":{"line":87,"column":5,"offset":8481},"end":{"line":87,"column":15,"offset":8491},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":8479},"end":{"line":87,"column":15,"offset":8491},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Controller manager","position":{"start":{"line":88,"column":5,"offset":8496},"end":{"line":88,"column":23,"offset":8514},"indent":[]}}],"position":{"start":{"line":88,"column":5,"offset":8496},"end":{"line":88,"column":23,"offset":8514},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":8494},"end":{"line":88,"column":23,"offset":8514},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Scheduler","position":{"start":{"line":89,"column":5,"offset":8519},"end":{"line":89,"column":14,"offset":8528},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":8519},"end":{"line":89,"column":14,"offset":8528},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":8517},"end":{"line":89,"column":14,"offset":8528},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":8479},"end":{"line":89,"column":14,"offset":8528},"indent":[3,3]}}],"position":{"start":{"line":86,"column":1,"offset":8445},"end":{"line":89,"column":14,"offset":8528},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Kubernetes audit logs","position":{"start":{"line":90,"column":3,"offset":8531},"end":{"line":90,"column":24,"offset":8552},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":8531},"end":{"line":90,"column":24,"offset":8552},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":8529},"end":{"line":90,"column":24,"offset":8552},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Application controller logs","position":{"start":{"line":91,"column":3,"offset":8555},"end":{"line":91,"column":30,"offset":8582},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":8555},"end":{"line":91,"column":30,"offset":8582},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":8553},"end":{"line":91,"column":30,"offset":8582},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":8415},"end":{"line":91,"column":30,"offset":8582},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is worth mentioning that k8s audit logs can be extremely noisy. It's worth using the ","position":{"start":{"line":93,"column":1,"offset":8584},"end":{"line":93,"column":89,"offset":8672},"indent":[]}},{"type":"link","title":null,"url":"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/","children":[{"type":"text","value":"documentation","position":{"start":{"line":93,"column":90,"offset":8673},"end":{"line":93,"column":103,"offset":8686},"indent":[]}}],"position":{"start":{"line":93,"column":89,"offset":8672},"end":{"line":93,"column":171,"offset":8754},"indent":[]}},{"type":"text","value":" to fine-tune them for your environment.","position":{"start":{"line":93,"column":171,"offset":8754},"end":{"line":93,"column":211,"offset":8794},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":8584},"end":{"line":93,"column":211,"offset":8794},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Limit the usage of log forwarders in a sidecar pattern - they consume a lot more resources. Opt for using a DaemonSet for the log forwarder and sending the logs to STDOUT. ","position":{"start":{"line":95,"column":1,"offset":8796},"end":{"line":95,"column":173,"offset":8968},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":8796},"end":{"line":95,"column":173,"offset":8968},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The book mentions SRE practices like defining SLOs and measuring them using SLIs, but those methodologies are beyond the scope of the book. They're still best practices though and should be implemented in order to provide a highly available, secure Kubernetes platform. All of the ","position":{"start":{"line":97,"column":1,"offset":8970},"end":{"line":97,"column":282,"offset":9251},"indent":[]}},{"type":"link","title":null,"url":"https://landing.google.com/sre/books/","children":[{"type":"text","value":"Google books on SRE are available for free","position":{"start":{"line":97,"column":283,"offset":9252},"end":{"line":97,"column":325,"offset":9294},"indent":[]}}],"position":{"start":{"line":97,"column":282,"offset":9251},"end":{"line":97,"column":365,"offset":9334},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":97,"column":365,"offset":9334},"end":{"line":97,"column":367,"offset":9336},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":8970},"end":{"line":97,"column":367,"offset":9336},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":99,"column":1,"offset":9338},"end":{"line":99,"column":4,"offset":9341},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"configuration-secrets-and-rbac\">","position":{"start":{"line":100,"column":5,"offset":9346},"end":{"line":100,"column":46,"offset":9387},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":100,"column":46,"offset":9387},"end":{"line":100,"column":50,"offset":9391},"indent":[]}},{"type":"link","title":null,"url":"#configuration-secrets-and-rbac","children":[{"type":"text","value":"Configuration, Secrets, and RBAC","position":{"start":{"line":100,"column":51,"offset":9392},"end":{"line":100,"column":83,"offset":9424},"indent":[]}}],"position":{"start":{"line":100,"column":50,"offset":9391},"end":{"line":100,"column":117,"offset":9458},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":9342},"end":{"line":100,"column":117,"offset":9458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generally speaking, the best way to approach any changes to a ConfigMap or Secret is to update the entire Deployment. This is because a change to the configuration object will not trigger an update of the Pods that reference/mount it. It is a best practice to use a version number in the ","position":{"start":{"line":101,"column":1,"offset":9459},"end":{"line":101,"column":289,"offset":9747},"indent":[]}},{"type":"inlineCode","value":"name","position":{"start":{"line":101,"column":289,"offset":9747},"end":{"line":101,"column":295,"offset":9753},"indent":[]}},{"type":"text","value":" of the configuration object and change the ","position":{"start":{"line":101,"column":295,"offset":9753},"end":{"line":101,"column":339,"offset":9797},"indent":[]}},{"type":"inlineCode","value":"Deployment","position":{"start":{"line":101,"column":339,"offset":9797},"end":{"line":101,"column":351,"offset":9809},"indent":[]}},{"type":"text","value":" to point at the new version. This will cause all of the Pods to update. It also makes rollback easy.","position":{"start":{"line":101,"column":351,"offset":9809},"end":{"line":101,"column":452,"offset":9910},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":9459},"end":{"line":101,"column":452,"offset":9910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can assign an ","position":{"start":{"line":103,"column":1,"offset":9912},"end":{"line":103,"column":19,"offset":9930},"indent":[]}},{"type":"inlineCode","value":"imagePullSecrets","position":{"start":{"line":103,"column":19,"offset":9930},"end":{"line":103,"column":37,"offset":9948},"indent":[]}},{"type":"text","value":" to a ","position":{"start":{"line":103,"column":37,"offset":9948},"end":{"line":103,"column":43,"offset":9954},"indent":[]}},{"type":"inlineCode","value":"serviceaccount","position":{"start":{"line":103,"column":43,"offset":9954},"end":{"line":103,"column":59,"offset":9970},"indent":[]}},{"type":"text","value":" that the pod will use to automatically mount the secret without having to declare it in the ","position":{"start":{"line":103,"column":59,"offset":9970},"end":{"line":103,"column":152,"offset":10063},"indent":[]}},{"type":"inlineCode","value":"pod.spec","position":{"start":{"line":103,"column":152,"offset":10063},"end":{"line":103,"column":162,"offset":10073},"indent":[]}},{"type":"text","value":". You can do this to the default service account for the namespace and the secret will be automatically added to all the pods in that namespace. ","position":{"start":{"line":103,"column":162,"offset":10073},"end":{"line":103,"column":307,"offset":10218},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":9912},"end":{"line":103,"column":307,"offset":10218},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RBAC has a lot in common with AWS IAM as far as best practices for scope of privilege (TL;DR - use least privilege). I've left out most of the information about RBAC, but it is worth explicitly stating that ","position":{"start":{"line":105,"column":1,"offset":10220},"end":{"line":105,"column":208,"offset":10427},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"most","position":{"start":{"line":105,"column":209,"offset":10428},"end":{"line":105,"column":213,"offset":10432},"indent":[]}}],"position":{"start":{"line":105,"column":208,"offset":10427},"end":{"line":105,"column":214,"offset":10433},"indent":[]}},{"type":"text","value":" application that run on Kubernetes will ","position":{"start":{"line":105,"column":214,"offset":10433},"end":{"line":105,"column":255,"offset":10474},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":105,"column":257,"offset":10476},"end":{"line":105,"column":260,"offset":10479},"indent":[]}}],"position":{"start":{"line":105,"column":255,"offset":10474},"end":{"line":105,"column":262,"offset":10481},"indent":[]}},{"type":"text","value":" need an RBAC role or role binding. This is because most applications do not directly interact with the k8s API itself. In the case where an application does need to interface with the k8s API, it should use a purpose-specific service account with a least privileged role to execute its goal. ","position":{"start":{"line":105,"column":262,"offset":10481},"end":{"line":105,"column":555,"offset":10774},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":10220},"end":{"line":105,"column":555,"offset":10774},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":107,"column":1,"offset":10776},"end":{"line":107,"column":4,"offset":10779},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"cicd\">","position":{"start":{"line":108,"column":5,"offset":10784},"end":{"line":108,"column":20,"offset":10799},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":108,"column":20,"offset":10799},"end":{"line":108,"column":24,"offset":10803},"indent":[]}},{"type":"link","title":null,"url":"#cicd","children":[{"type":"text","value":"Continuous Integration, Testing, and Deployment","position":{"start":{"line":108,"column":25,"offset":10804},"end":{"line":108,"column":72,"offset":10851},"indent":[]}}],"position":{"start":{"line":108,"column":24,"offset":10803},"end":{"line":108,"column":80,"offset":10859},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":10780},"end":{"line":108,"column":80,"offset":10859},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"CI/CD, DevOps, GitOps, etc., all deserve and have their own books about them. With regards to best practices for Kubernetes, there will a few specific and salient points that jumped out at me:","position":{"start":{"line":109,"column":1,"offset":10860},"end":{"line":109,"column":193,"offset":11052},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":10860},"end":{"line":109,"column":193,"offset":11052},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Whatever CI/CD tools that you choose must be able to define the pipeline as code. Storing the pipeline in version control alongside the application code is invaluable.","position":{"start":{"line":111,"column":4,"offset":11057},"end":{"line":111,"column":171,"offset":11224},"indent":[]}}],"position":{"start":{"line":111,"column":4,"offset":11057},"end":{"line":111,"column":171,"offset":11224},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11054},"end":{"line":111,"column":171,"offset":11224},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Optimize your container images for size. Smaller images means more efficient development and lower security risk.","position":{"start":{"line":112,"column":4,"offset":11228},"end":{"line":112,"column":117,"offset":11341},"indent":[]}}],"position":{"start":{"line":112,"column":4,"offset":11228},"end":{"line":112,"column":117,"offset":11341},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"As you mature, you may become comfortable using a ","position":{"start":{"line":113,"column":6,"offset":11347},"end":{"line":113,"column":56,"offset":11397},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/GoogleContainerTools/distroless","children":[{"type":"text","value":"distroless base image.","position":{"start":{"line":113,"column":57,"offset":11398},"end":{"line":113,"column":79,"offset":11420},"indent":[]}}],"position":{"start":{"line":113,"column":56,"offset":11397},"end":{"line":113,"column":132,"offset":11473},"indent":[]}}],"position":{"start":{"line":113,"column":6,"offset":11347},"end":{"line":113,"column":132,"offset":11473},"indent":[]}}],"position":{"start":{"line":113,"column":4,"offset":11345},"end":{"line":113,"column":132,"offset":11473},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use multi-stage builds to slim down containers. A classic example is to build your Go static binary and place only that into the production container - not all the packages that were used to build it.","position":{"start":{"line":114,"column":6,"offset":11479},"end":{"line":114,"column":206,"offset":11679},"indent":[]}}],"position":{"start":{"line":114,"column":6,"offset":11479},"end":{"line":114,"column":206,"offset":11679},"indent":[]}}],"position":{"start":{"line":114,"column":4,"offset":11477},"end":{"line":114,"column":206,"offset":11679},"indent":[]}}],"position":{"start":{"line":113,"column":4,"offset":11345},"end":{"line":114,"column":206,"offset":11679},"indent":[4]}}],"position":{"start":{"line":112,"column":1,"offset":11225},"end":{"line":114,"column":206,"offset":11679},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Do not use the ","position":{"start":{"line":115,"column":6,"offset":11685},"end":{"line":115,"column":21,"offset":11700},"indent":[]}},{"type":"inlineCode","value":"latest","position":{"start":{"line":115,"column":21,"offset":11700},"end":{"line":115,"column":29,"offset":11708},"indent":[]}},{"type":"text","value":" tag!","position":{"start":{"line":115,"column":29,"offset":11708},"end":{"line":115,"column":34,"offset":11713},"indent":[]}}],"position":{"start":{"line":115,"column":4,"offset":11683},"end":{"line":115,"column":36,"offset":11715},"indent":[]}},{"type":"text","value":" Every container image tag should point to a specific version/build of the code.","position":{"start":{"line":115,"column":36,"offset":11715},"end":{"line":115,"column":116,"offset":11795},"indent":[]}}],"position":{"start":{"line":115,"column":4,"offset":11683},"end":{"line":115,"column":116,"offset":11795},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":11680},"end":{"line":115,"column":116,"offset":11795},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Kubernetes offers several different deployment strategies. If you're just getting started, rolling deployments are the easiest to use. When using blue/green or canary, be sure to understand the implications for having two versions of your application available - especially as it relates to state and/or hybrid applications.","position":{"start":{"line":116,"column":4,"offset":11799},"end":{"line":116,"column":328,"offset":12123},"indent":[]}}],"position":{"start":{"line":116,"column":4,"offset":11799},"end":{"line":116,"column":328,"offset":12123},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":11796},"end":{"line":116,"column":328,"offset":12123},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11054},"end":{"line":116,"column":328,"offset":12123},"indent":[1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":118,"column":1,"offset":12125},"end":{"line":118,"column":4,"offset":12128},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"versioning-releases-and-rollouts\">","position":{"start":{"line":119,"column":5,"offset":12133},"end":{"line":119,"column":48,"offset":12176},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":119,"column":48,"offset":12176},"end":{"line":119,"column":52,"offset":12180},"indent":[]}},{"type":"link","title":null,"url":"#versioning-releases-and-rollouts","children":[{"type":"text","value":"Versioning, Releases, and Rollouts","position":{"start":{"line":119,"column":53,"offset":12181},"end":{"line":119,"column":87,"offset":12215},"indent":[]}}],"position":{"start":{"line":119,"column":52,"offset":12180},"end":{"line":119,"column":123,"offset":12251},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":12129},"end":{"line":119,"column":123,"offset":12251},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Versioning should be a relatively straightforward task, but it's a critical one. There are so many different types of Kubernetes API objects, each with their own version, that making sure everything is properly versioned becomes mission critical in order to enable smooth operations.","position":{"start":{"line":120,"column":1,"offset":12252},"end":{"line":120,"column":284,"offset":12535},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":12252},"end":{"line":120,"column":284,"offset":12535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As far as rollouts are concerned, it's imperative to understand that changes to the metadata fields of a Deployment will not trigger an update. Only changes to the ","position":{"start":{"line":122,"column":1,"offset":12537},"end":{"line":122,"column":165,"offset":12701},"indent":[]}},{"type":"inlineCode","value":"spec.template","position":{"start":{"line":122,"column":165,"offset":12701},"end":{"line":122,"column":180,"offset":12716},"indent":[]}},{"type":"text","value":" will trigger an update. This becomes important as you will have versions for containers, Pods, Deployments, Services, and the application itself - all of which should be distinct from each other.  ","position":{"start":{"line":122,"column":180,"offset":12716},"end":{"line":122,"column":378,"offset":12914},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":12537},"end":{"line":122,"column":378,"offset":12914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use a release and release version/number in your Deployment metadata. The release name and number should coordinate with the actual release from your CI/CD tooling in order to enable traceability.  ","position":{"start":{"line":124,"column":1,"offset":12916},"end":{"line":124,"column":199,"offset":13114},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":12916},"end":{"line":124,"column":199,"offset":13114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're using Helm, be sure to bundle services that need to be rolled back or upgraded together. You can use ","position":{"start":{"line":126,"column":1,"offset":13116},"end":{"line":126,"column":112,"offset":13227},"indent":[]}},{"type":"link","title":null,"url":"https://helm.sh/docs/topics/charts_hooks/","children":[{"type":"text","value":"Helm chart hooks","position":{"start":{"line":126,"column":113,"offset":13228},"end":{"line":126,"column":129,"offset":13244},"indent":[]}}],"position":{"start":{"line":126,"column":112,"offset":13227},"end":{"line":126,"column":173,"offset":13288},"indent":[]}},{"type":"text","value":" to make sure that release lifecycle events go smoothly. Chart hooks allow events (e.g., run a Job, mount a ConfigMap, etc.) to be triggered at specific times in the release lifecycle (e.g., ","position":{"start":{"line":126,"column":173,"offset":13288},"end":{"line":126,"column":364,"offset":13479},"indent":[]}},{"type":"inlineCode","value":"pre-install","position":{"start":{"line":126,"column":364,"offset":13479},"end":{"line":126,"column":377,"offset":13492},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":126,"column":377,"offset":13492},"end":{"line":126,"column":379,"offset":13494},"indent":[]}},{"type":"inlineCode","value":"post-rollback","position":{"start":{"line":126,"column":379,"offset":13494},"end":{"line":126,"column":394,"offset":13509},"indent":[]}},{"type":"text","value":", etc.)","position":{"start":{"line":126,"column":394,"offset":13509},"end":{"line":126,"column":401,"offset":13516},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":13116},"end":{"line":126,"column":401,"offset":13516},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":128,"column":1,"offset":13518},"end":{"line":128,"column":4,"offset":13521},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"distribution-and-staging\">","position":{"start":{"line":129,"column":5,"offset":13526},"end":{"line":129,"column":40,"offset":13561},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":129,"column":40,"offset":13561},"end":{"line":129,"column":44,"offset":13565},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":129,"column":44,"offset":13565},"end":{"line":129,"column":45,"offset":13566},"indent":[]}},{"type":"link","title":null,"url":"#distribution-and-staging","children":[{"type":"text","value":"Worldwide Application Distribution and Staging","position":{"start":{"line":129,"column":46,"offset":13567},"end":{"line":129,"column":92,"offset":13613},"indent":[]}}],"position":{"start":{"line":129,"column":45,"offset":13566},"end":{"line":129,"column":120,"offset":13641},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":13522},"end":{"line":129,"column":120,"offset":13641},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting with the fundamentals, it's imperative to have your container images distributed to each region that your workload is running in. This helps to make rollouts more reliable by avoiding any networking issues that may crop up.","position":{"start":{"line":130,"column":1,"offset":13642},"end":{"line":130,"column":233,"offset":13874},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":13642},"end":{"line":130,"column":233,"offset":13874},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Global rollouts should be preceded by rigorous integration testing. Ideally, you will have a copy of your production data available for this - try to think ahead ","position":{"start":{"line":132,"column":1,"offset":13876},"end":{"line":132,"column":163,"offset":14038},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"before","position":{"start":{"line":132,"column":164,"offset":14039},"end":{"line":132,"column":170,"offset":14045},"indent":[]}}],"position":{"start":{"line":132,"column":163,"offset":14038},"end":{"line":132,"column":171,"offset":14046},"indent":[]}},{"type":"text","value":" you're scaled up. Setting up good integration testing is easier early on in the development of an application and it pays serious dividends in the long run. Load-testing should also be performed. Replaying the logged traffic is a good starting point, but not always fool-proof.","position":{"start":{"line":132,"column":171,"offset":14046},"end":{"line":132,"column":449,"offset":14324},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":13876},"end":{"line":132,"column":449,"offset":14324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you're ready to begin the rollout, a canary region should be selected and deployed to. Your customers will use this region as a preproduction environment to validate ","position":{"start":{"line":134,"column":1,"offset":14326},"end":{"line":134,"column":172,"offset":14497},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"their","position":{"start":{"line":134,"column":173,"offset":14498},"end":{"line":134,"column":178,"offset":14503},"indent":[]}}],"position":{"start":{"line":134,"column":172,"offset":14497},"end":{"line":134,"column":179,"offset":14504},"indent":[]}},{"type":"text","value":" use of your service before continuing the rollout. Generally speaking, a decent rule of thumb is to leave this deployment in the canary region for double the average time-to-smoke. ","position":{"start":{"line":134,"column":179,"offset":14504},"end":{"line":134,"column":361,"offset":14686},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":14326},"end":{"line":134,"column":361,"offset":14686},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lastly, be sure to document and ","position":{"start":{"line":136,"column":1,"offset":14688},"end":{"line":136,"column":33,"offset":14720},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"practice","position":{"start":{"line":136,"column":35,"offset":14722},"end":{"line":136,"column":43,"offset":14730},"indent":[]}}],"position":{"start":{"line":136,"column":33,"offset":14720},"end":{"line":136,"column":45,"offset":14732},"indent":[]}},{"type":"text","value":" your response to any problems or processes that you encounter. There should be runbooks for everything you need to do - nothing should be done from memory. ","position":{"start":{"line":136,"column":45,"offset":14732},"end":{"line":136,"column":202,"offset":14889},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":14688},"end":{"line":136,"column":202,"offset":14889},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":138,"column":1,"offset":14891},"end":{"line":138,"column":4,"offset":14894},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"resource-management\">","position":{"start":{"line":139,"column":5,"offset":14899},"end":{"line":139,"column":35,"offset":14929},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":139,"column":35,"offset":14929},"end":{"line":139,"column":39,"offset":14933},"indent":[]}},{"type":"link","title":null,"url":"#resource-management","children":[{"type":"text","value":"Resource Management","position":{"start":{"line":139,"column":40,"offset":14934},"end":{"line":139,"column":59,"offset":14953},"indent":[]}}],"position":{"start":{"line":139,"column":39,"offset":14933},"end":{"line":139,"column":82,"offset":14976},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":14895},"end":{"line":139,"column":82,"offset":14976},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Both the general guidelines and the specific implementations of resource management depend on the workload and the underlying hardware it requires. Any specialized hardware (e.g., GPUs) should be accessed with taints and/or nodeSelectors. Use nodeSelectors when you want to ","position":{"start":{"line":140,"column":1,"offset":14977},"end":{"line":140,"column":275,"offset":15251},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"request","position":{"start":{"line":140,"column":276,"offset":15252},"end":{"line":140,"column":283,"offset":15259},"indent":[]}}],"position":{"start":{"line":140,"column":275,"offset":15251},"end":{"line":140,"column":284,"offset":15260},"indent":[]}},{"type":"text","value":" specialized hardware and use taints when you want to ","position":{"start":{"line":140,"column":284,"offset":15260},"end":{"line":140,"column":338,"offset":15314},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"reserve","position":{"start":{"line":140,"column":339,"offset":15315},"end":{"line":140,"column":346,"offset":15322},"indent":[]}}],"position":{"start":{"line":140,"column":338,"offset":15314},"end":{"line":140,"column":347,"offset":15323},"indent":[]}},{"type":"text","value":" it. If you're running multiple workloads with different performance requirements, be sure to include a mix of node pools with different instance types. If those workloads are variable or have unexpected spikes in usage, consider using the Horizontal Pod Autoscaler. ","position":{"start":{"line":140,"column":347,"offset":15323},"end":{"line":140,"column":614,"offset":15590},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":14977},"end":{"line":140,"column":614,"offset":15590},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As far as Pods go, everything should have its Requests and Limits defined. If a Pod's Requests and Limits are equal, the Pod will receive a ","position":{"start":{"line":142,"column":1,"offset":15592},"end":{"line":142,"column":141,"offset":15732},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"guaranteed","position":{"start":{"line":142,"column":142,"offset":15733},"end":{"line":142,"column":152,"offset":15743},"indent":[]}}],"position":{"start":{"line":142,"column":141,"offset":15732},"end":{"line":142,"column":153,"offset":15744},"indent":[]}},{"type":"text","value":" Quality of Service (QoS) class. This is partly why it's recommended to set them equal when you're getting started on your k8s journey. However, guaranteed QoS requires that Requests and Limits are set ","position":{"start":{"line":142,"column":153,"offset":15744},"end":{"line":142,"column":355,"offset":15946},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"for all containers in a Pod","position":{"start":{"line":142,"column":356,"offset":15947},"end":{"line":142,"column":383,"offset":15974},"indent":[]}}],"position":{"start":{"line":142,"column":355,"offset":15946},"end":{"line":142,"column":384,"offset":15975},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":142,"column":384,"offset":15975},"end":{"line":142,"column":386,"offset":15977},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":15592},"end":{"line":142,"column":386,"offset":15977},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Additionally, use PodDisruptionBudgets to manage how many Pods are (un)available during a disruption. This, in congruence with (anti-)affinity attributes, can ensure that your service remains highly available through out operations and outages. ","position":{"start":{"line":144,"column":1,"offset":15979},"end":{"line":144,"column":246,"offset":16224},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":15979},"end":{"line":144,"column":246,"offset":16224},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":146,"column":1,"offset":16226},"end":{"line":146,"column":4,"offset":16229},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"jsx","value":"<a name=\"networking\">","position":{"start":{"line":147,"column":5,"offset":16234},"end":{"line":147,"column":26,"offset":16255},"indent":[]}},{"type":"jsx","value":"</a>","position":{"start":{"line":147,"column":26,"offset":16255},"end":{"line":147,"column":30,"offset":16259},"indent":[]}},{"type":"link","title":null,"url":"#networking","children":[{"type":"text","value":"Networking, Network Security, and Service Mesh","position":{"start":{"line":147,"column":31,"offset":16260},"end":{"line":147,"column":77,"offset":16306},"indent":[]}}],"position":{"start":{"line":147,"column":30,"offset":16259},"end":{"line":147,"column":91,"offset":16320},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":16230},"end":{"line":147,"column":91,"offset":16320},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Probably the single most important decision around networking is what Container Network Interface to use. This deserves its own article. The chosen CNI should deliver the feature set required, be compatible with your control plane (particularly important when consuming a managed service like AWS EKS), and be compatible with your network observability, management, and security tooling. And, if you choose to use a CNI that does not over a network overlay, you'll need to make sure that you have enough CIDR to handle node IPs, Pod IPs, load balancers, and wiggle room for rollouts and scaling. ","position":{"start":{"line":148,"column":1,"offset":16321},"end":{"line":148,"column":597,"offset":16917},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":16321},"end":{"line":148,"column":597,"offset":16917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next big decision to make is the choice of Ingress controller. Just like choosing a CNI, a thorough investiation of feature set and compatability needs to be performed. Standardize the chosen Ingress controller across the enterpise because many of the specific configuration annotations vary between implementations. If you aren't consistent, your workloads won't be portable. ","position":{"start":{"line":150,"column":1,"offset":16919},"end":{"line":150,"column":382,"offset":17300},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":16919},"end":{"line":150,"column":382,"offset":17300},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Kubernetes Best Practices\",\"date\":\"2020-09-16T00:00:00.000Z\",\"description\":\"TL;DR - Blueprints for building successful applications on Kubernetes.\",\"tags\":[\"cloud\",\"k8s\",\"tldr\"],\"banner\":\"./cover.jpg\"}","position":{"start":{"line":156,"column":1,"offset":17306},"end":{"line":156,"column":240,"offset":17545},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":156,"column":240,"offset":17545}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Kubernetes Best Practices\",\n  \"date\": \"2020-09-16T00:00:00.000Z\",\n  \"description\": \"TL;DR - Blueprints for building successful applications on Kubernetes.\",\n  \"tags\": [\"cloud\", \"k8s\", \"tldr\"],\n  \"banner\": \"./cover.jpg\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Table of Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#abstract\"\n  }), \"Abstract\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#setting-up-a-basic-service\"\n  }), \"Setting Up a Basic Service\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#developer-workflows\"\n  }), \"Developer Workflows\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#telemetry\"\n  }), \"Monitoring and Logging in Kubernetes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#configuration-secrets-and-rbac\"\n  }), \"Configuration, Secrets, and RBAC\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#cicd\"\n  }), \"Continuous Integration, Testing, and Deployment\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#versioning-releases-and-rollouts\"\n  }), \"Versioning, Releases, and Rollouts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#distribution-and-staging\"\n  }), \"Worldwide Application Distribution and Staging\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#resource-management\"\n  }), \"Resource Management\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#networking\"\n  }), \"Networking, Network Security, and Service Mesh\"))), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"abstract\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#abstract\"\n  }), \"Abstract\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.oreilly.com/library/view/kubernetes-best-practices/9781492056461/\"\n  }), \"Kubernetes Best Practices\"), \" was authored by Brendan Burns, Eddie Villalba, Dave Strebel, and Lachlan Evenson. These are the working notes that I took while reading the book. I have a solid working knowledge of Kubernetes and did not seek to regurgitate everything I read. Instead, I hope that this article consists of the juiciest tid bits and highlights that are easily consumable for anyone familiar with k8s. Enjoy! \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"setting-up-a-basic-service\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#setting-up-a-basic-service\"\n  }), \"Setting Up a Basic Service\")), mdx(\"p\", null, \"Kubernetes starts with containers - immutable containers to be specific. Do not use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"latest\"), \" tag for your image versions. Instead, use a combination of semantic versioning and the SHA hash of the commit where the image was built (e.g., v1.0.1-bfeda01f).\"), mdx(\"p\", null, \"It's recommended to set a container's Requests and Limits are set equal to each other. This results in very predictable pod behavior, as well as predictable utilization. You can certainly set the values for Requests and Limits independently in order to drive maximal utilization, but most users find that the stability/predictability from setting them equal is more valuable than the gained utilization. \"), mdx(\"p\", null, \"The key/values in a ConfigMap are subject to change. When a key/value needs to be updated, it may be tempting to edit the ConfigMap\\nYAML and apply the update in-place. However, this will not trigger an update to existing Pods using the ConfigMap - they will only use the new configuration after a restart. Rather than updating the existing ConfigMap, adding version numbers to your ConfigMaps, deploying an entirely new ConfigMap, and updating the Deployment to use this new one. Rollout of the new configuration will be automatically triggered. Additionally, the previous version of the ConfigMap will still be available in the cluster - rollback is just a matter of updating the Deployment again. \"), mdx(\"p\", null, \"Secrets are stored unencrypted within etcd. If you want to protect that sensitive data from a direct attack against etcd, you can provide Kubernetes with a key that it will use to encrypt the data at rest. There's more information available \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/\"\n  }), \"in the documentation.\")), mdx(\"p\", null, \"Generally speaking, managing state is hard. Also, generally speaking, stateful services (e.g., Redis as a service) are worth the extra cost. The book doesn't offer any additional information or opinions beyond this, but there is an excellent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-mapping-external-services\"\n  }), \"blog article\"), \" by Google about mapping to external services. The book has an entire chapter on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#integrating-external-services-and-kubernetes\"\n  }), \"integrating external services\"), \", as well as a chapter on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#managing-state-and-stateful-applications\"\n  }), \"managing state and stateful applications!\")), mdx(\"p\", null, \"Even if you're an individual developer, you will eventually want your k8s configuration yaml to be deployed to multiple, different endpoints (e.g., dev, stage, prod). Rather than having multiple copies of the same code, you should use a packing tool like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://helm.sh/\"\n  }), \"Helm\"), \" to parametrize your configuration. Instead of having multiple copies of application YAML, you can have a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values.yaml\"), \" per deployment environment and you can keep them all in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"templates/\"), \" directory at the root of your project. The book doesn't talk about it, but this also gives you the added benefit of building modular, reusable k8s building blocks. These can be shared and leveraged across the company so that teams don't need to reinvent the wheel. \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"developer-workflows\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#developer-workflows\"\n  }), \"Developer Workflows\")), mdx(\"p\", null, \"When thinking about developer interactions with a development cluster, it can be useful to break it down into three phases:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Onboarding - getting access to the cluster\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Developing - getting bootstrapped and able to deploy\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Testing - being able to iterate quickly and efficiently\")), mdx(\"p\", null, \"Generally speaking, it's a best practice to use a single, large cluster for all developers and break it down into namespaces to keep things tidy. There is some additional overhead of managing this cluster as opposed to creating individual clusters per developer, but the increased resource utilization and availability of shared services (e.g., logging) make it worthwhile. When you're operating in this model, it is also a good idea to give everyone read access to the entire cluster. This can help everyone debug in case your neighbor is breaking your deployment or hogging all the resources. However, it's worth noting that the default read access will include Secrets. You can create fine-grain permissions that exclude Secrets if necessary, but it's usually not a problem in a development environment. \"), mdx(\"p\", null, \"It can be extremely useful to automate as much of the namespace management as possible. This could be a script that creates a new namespace, adds users to it, defines the Requests and Limits, and sets a TTL. The idea of a TTL is useful because it helps keep the cluster lean and clean (and helps build good developer habits). You can enforce the TTL by writing a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/\"\n  }), \"CronJob\"), \" to clean them up. You could also replace the script that instantiates the namespace with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\"\n  }), \"CRD\"), \"!\"), mdx(\"p\", null, \"If your development namespace has a TTL, then you're definitely going to want a script that installs all the necessary dependencies for your project. It is also a best practice to have a script that will delete and recreate your Deployments rather than update them in-place. In a development environment, you want your code changes to rollout quickly, but modifying the k8s rollout logic should only be done with extreme caution - you do not want to create drift between your development and production clusters. \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"telemetry\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#telemetry\"\n  }), \"Monitoring and Logging in Kubernetes\")), mdx(\"p\", null, \"There are two monitoring paradigms that complement each other and are useful in the context of Kubernetes: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USE\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RED\"), \". \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"U\"), \" - Utilization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"S\"), \" - Saturation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"E\"), \" - Errors\", mdx(\"p\", null)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"R\"), \" - Rate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"E\"), \" - Errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"D\"), \" - Duration\")), mdx(\"p\", null, \"USE focuses more on the infrastructure, whereas RED focuses on the end-user experience for the application. These patterns should help determine what you monitor, because monitoring everything is counter-productive (poor signal:noise ratio).\"), mdx(\"p\", null, \"Rather than focusing on the details of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#the-metrics-api\"\n  }), \"the Metrics API\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kubernetes-sigs/metrics-server\"\n  }), \"Metrics Server\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kubernetes/kube-state-metrics\"\n  }), \"kube-state-metrics\"), \", or any of the multitude of monitoring tools available (e.g., \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prometheus.io/docs/introduction/overview/\"\n  }), \"Prometheus\"), \"), I'd like to focus on what metrics should be captured. Monitoring should take a layered approach that takes into account the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Physical or virtual nodes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cluster components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cluster add-ons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"End-user applications\")), mdx(\"p\", null, \"Given these layers, what metrics should be targeted?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPU utilization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory utilization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Network utilization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Disk utilization\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cluster components\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"etcd latency\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cluster add-ons\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cluster Autoscaler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ingress Controller\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Container memory utilization and saturation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Container CPU utilization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Container network utilization and error rate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application frame-work specific metrics\")))), mdx(\"p\", null, \"With regards to logging, there are several components that you will need to capture logs from:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node logs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Docker daemon\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kubernetes control-plane logs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"API server\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controller manager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scheduler\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kubernetes audit logs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application controller logs\")), mdx(\"p\", null, \"It is worth mentioning that k8s audit logs can be extremely noisy. It's worth using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/\"\n  }), \"documentation\"), \" to fine-tune them for your environment.\"), mdx(\"p\", null, \"Limit the usage of log forwarders in a sidecar pattern - they consume a lot more resources. Opt for using a DaemonSet for the log forwarder and sending the logs to STDOUT. \"), mdx(\"p\", null, \"The book mentions SRE practices like defining SLOs and measuring them using SLIs, but those methodologies are beyond the scope of the book. They're still best practices though and should be implemented in order to provide a highly available, secure Kubernetes platform. All of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://landing.google.com/sre/books/\"\n  }), \"Google books on SRE are available for free\"), \". \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"configuration-secrets-and-rbac\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#configuration-secrets-and-rbac\"\n  }), \"Configuration, Secrets, and RBAC\")), mdx(\"p\", null, \"Generally speaking, the best way to approach any changes to a ConfigMap or Secret is to update the entire Deployment. This is because a change to the configuration object will not trigger an update of the Pods that reference/mount it. It is a best practice to use a version number in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" of the configuration object and change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Deployment\"), \" to point at the new version. This will cause all of the Pods to update. It also makes rollback easy.\"), mdx(\"p\", null, \"You can assign an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"imagePullSecrets\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"serviceaccount\"), \" that the pod will use to automatically mount the secret without having to declare it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pod.spec\"), \". You can do this to the default service account for the namespace and the secret will be automatically added to all the pods in that namespace. \"), mdx(\"p\", null, \"RBAC has a lot in common with AWS IAM as far as best practices for scope of privilege (TL;DR - use least privilege). I've left out most of the information about RBAC, but it is worth explicitly stating that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"most\"), \" application that run on Kubernetes will \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" need an RBAC role or role binding. This is because most applications do not directly interact with the k8s API itself. In the case where an application does need to interface with the k8s API, it should use a purpose-specific service account with a least privileged role to execute its goal. \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"cicd\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#cicd\"\n  }), \"Continuous Integration, Testing, and Deployment\")), mdx(\"p\", null, \"CI/CD, DevOps, GitOps, etc., all deserve and have their own books about them. With regards to best practices for Kubernetes, there will a few specific and salient points that jumped out at me:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Whatever CI/CD tools that you choose must be able to define the pipeline as code. Storing the pipeline in version control alongside the application code is invaluable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Optimize your container images for size. Smaller images means more efficient development and lower security risk.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As you mature, you may become comfortable using a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/GoogleContainerTools/distroless\"\n  }), \"distroless base image.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use multi-stage builds to slim down containers. A classic example is to build your Go static binary and place only that into the production container - not all the packages that were used to build it.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Do not use the \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"latest\"), \" tag!\"), \" Every container image tag should point to a specific version/build of the code.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Kubernetes offers several different deployment strategies. If you're just getting started, rolling deployments are the easiest to use. When using blue/green or canary, be sure to understand the implications for having two versions of your application available - especially as it relates to state and/or hybrid applications.\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"versioning-releases-and-rollouts\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#versioning-releases-and-rollouts\"\n  }), \"Versioning, Releases, and Rollouts\")), mdx(\"p\", null, \"Versioning should be a relatively straightforward task, but it's a critical one. There are so many different types of Kubernetes API objects, each with their own version, that making sure everything is properly versioned becomes mission critical in order to enable smooth operations.\"), mdx(\"p\", null, \"As far as rollouts are concerned, it's imperative to understand that changes to the metadata fields of a Deployment will not trigger an update. Only changes to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.template\"), \" will trigger an update. This becomes important as you will have versions for containers, Pods, Deployments, Services, and the application itself - all of which should be distinct from each other.  \"), mdx(\"p\", null, \"Use a release and release version/number in your Deployment metadata. The release name and number should coordinate with the actual release from your CI/CD tooling in order to enable traceability.  \"), mdx(\"p\", null, \"If you're using Helm, be sure to bundle services that need to be rolled back or upgraded together. You can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://helm.sh/docs/topics/charts_hooks/\"\n  }), \"Helm chart hooks\"), \" to make sure that release lifecycle events go smoothly. Chart hooks allow events (e.g., run a Job, mount a ConfigMap, etc.) to be triggered at specific times in the release lifecycle (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre-install\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post-rollback\"), \", etc.)\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"distribution-and-staging\"\n  }), \" \", mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#distribution-and-staging\"\n  }), \"Worldwide Application Distribution and Staging\")), mdx(\"p\", null, \"Starting with the fundamentals, it's imperative to have your container images distributed to each region that your workload is running in. This helps to make rollouts more reliable by avoiding any networking issues that may crop up.\"), mdx(\"p\", null, \"Global rollouts should be preceded by rigorous integration testing. Ideally, you will have a copy of your production data available for this - try to think ahead \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before\"), \" you're scaled up. Setting up good integration testing is easier early on in the development of an application and it pays serious dividends in the long run. Load-testing should also be performed. Replaying the logged traffic is a good starting point, but not always fool-proof.\"), mdx(\"p\", null, \"Once you're ready to begin the rollout, a canary region should be selected and deployed to. Your customers will use this region as a preproduction environment to validate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"their\"), \" use of your service before continuing the rollout. Generally speaking, a decent rule of thumb is to leave this deployment in the canary region for double the average time-to-smoke. \"), mdx(\"p\", null, \"Lastly, be sure to document and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"practice\"), \" your response to any problems or processes that you encounter. There should be runbooks for everything you need to do - nothing should be done from memory. \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"resource-management\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#resource-management\"\n  }), \"Resource Management\")), mdx(\"p\", null, \"Both the general guidelines and the specific implementations of resource management depend on the workload and the underlying hardware it requires. Any specialized hardware (e.g., GPUs) should be accessed with taints and/or nodeSelectors. Use nodeSelectors when you want to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"request\"), \" specialized hardware and use taints when you want to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reserve\"), \" it. If you're running multiple workloads with different performance requirements, be sure to include a mix of node pools with different instance types. If those workloads are variable or have unexpected spikes in usage, consider using the Horizontal Pod Autoscaler. \"), mdx(\"p\", null, \"As far as Pods go, everything should have its Requests and Limits defined. If a Pod's Requests and Limits are equal, the Pod will receive a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"guaranteed\"), \" Quality of Service (QoS) class. This is partly why it's recommended to set them equal when you're getting started on your k8s journey. However, guaranteed QoS requires that Requests and Limits are set \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"for all containers in a Pod\"), \". \"), mdx(\"p\", null, \"Additionally, use PodDisruptionBudgets to manage how many Pods are (un)available during a disruption. This, in congruence with (anti-)affinity attributes, can ensure that your service remains highly available through out operations and outages. \"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", {\n    name: \"networking\"\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#networking\"\n  }), \"Networking, Network Security, and Service Mesh\")), mdx(\"p\", null, \"Probably the single most important decision around networking is what Container Network Interface to use. This deserves its own article. The chosen CNI should deliver the feature set required, be compatible with your control plane (particularly important when consuming a managed service like AWS EKS), and be compatible with your network observability, management, and security tooling. And, if you choose to use a CNI that does not over a network overlay, you'll need to make sure that you have enough CIDR to handle node IPs, Pod IPs, load balancers, and wiggle room for rollouts and scaling. \"), mdx(\"p\", null, \"The next big decision to make is the choice of Ingress controller. Just like choosing a CNI, a thorough investiation of feature set and compatability needs to be performed. Standardize the chosen Ingress controller across the enterpise because many of the specific configuration annotations vary between implementations. If you aren't consistent, your workloads won't be portable. \"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Kubernetes Best Practices\",\n  \"date\": \"2020-09-16T00:00:00.000Z\",\n  \"description\": \"TL;DR - Blueprints for building successful applications on Kubernetes.\",\n  \"tags\": [\"cloud\", \"k8s\", \"tldr\"],\n  \"banner\": \"./cover.jpg\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3>{`Table of Contents`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#abstract\"\n        }}>{`Abstract`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#setting-up-a-basic-service\"\n        }}>{`Setting Up a Basic Service`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#developer-workflows\"\n        }}>{`Developer Workflows`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#telemetry\"\n        }}>{`Monitoring and Logging in Kubernetes`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#configuration-secrets-and-rbac\"\n        }}>{`Configuration, Secrets, and RBAC`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#cicd\"\n        }}>{`Continuous Integration, Testing, and Deployment`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#versioning-releases-and-rollouts\"\n        }}>{`Versioning, Releases, and Rollouts`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#distribution-and-staging\"\n        }}>{`Worldwide Application Distribution and Staging`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#resource-management\"\n        }}>{`Resource Management`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#networking\"\n        }}>{`Networking, Network Security, and Service Mesh`}</a></li>\n    </ul>\n    <hr></hr>\n    <h3><a name=\"abstract\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#abstract\"\n      }}>{`Abstract`}</a></h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.oreilly.com/library/view/kubernetes-best-practices/9781492056461/\"\n      }}>{`Kubernetes Best Practices`}</a>{` was authored by Brendan Burns, Eddie Villalba, Dave Strebel, and Lachlan Evenson. These are the working notes that I took while reading the book. I have a solid working knowledge of Kubernetes and did not seek to regurgitate everything I read. Instead, I hope that this article consists of the juiciest tid bits and highlights that are easily consumable for anyone familiar with k8s. Enjoy! `}</p>\n    <hr></hr>\n    <h3><a name=\"setting-up-a-basic-service\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#setting-up-a-basic-service\"\n      }}>{`Setting Up a Basic Service`}</a></h3>\n    <p>{`Kubernetes starts with containers - immutable containers to be specific. Do not use the `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` tag for your image versions. Instead, use a combination of semantic versioning and the SHA hash of the commit where the image was built (e.g., v1.0.1-bfeda01f).`}</p>\n    <p>{`It's recommended to set a container's Requests and Limits are set equal to each other. This results in very predictable pod behavior, as well as predictable utilization. You can certainly set the values for Requests and Limits independently in order to drive maximal utilization, but most users find that the stability/predictability from setting them equal is more valuable than the gained utilization. `}</p>\n    <p>{`The key/values in a ConfigMap are subject to change. When a key/value needs to be updated, it may be tempting to edit the ConfigMap\nYAML and apply the update in-place. However, this will not trigger an update to existing Pods using the ConfigMap - they will only use the new configuration after a restart. Rather than updating the existing ConfigMap, adding version numbers to your ConfigMaps, deploying an entirely new ConfigMap, and updating the Deployment to use this new one. Rollout of the new configuration will be automatically triggered. Additionally, the previous version of the ConfigMap will still be available in the cluster - rollback is just a matter of updating the Deployment again. `}</p>\n    <p>{`Secrets are stored unencrypted within etcd. If you want to protect that sensitive data from a direct attack against etcd, you can provide Kubernetes with a key that it will use to encrypt the data at rest. There's more information available `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/\"\n      }}>{`in the documentation.`}</a></p>\n    <p>{`Generally speaking, managing state is hard. Also, generally speaking, stateful services (e.g., Redis as a service) are worth the extra cost. The book doesn't offer any additional information or opinions beyond this, but there is an excellent `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-mapping-external-services\"\n      }}>{`blog article`}</a>{` by Google about mapping to external services. The book has an entire chapter on `}<a parentName=\"p\" {...{\n        \"href\": \"#integrating-external-services-and-kubernetes\"\n      }}>{`integrating external services`}</a>{`, as well as a chapter on `}<a parentName=\"p\" {...{\n        \"href\": \"#managing-state-and-stateful-applications\"\n      }}>{`managing state and stateful applications!`}</a></p>\n    <p>{`Even if you're an individual developer, you will eventually want your k8s configuration yaml to be deployed to multiple, different endpoints (e.g., dev, stage, prod). Rather than having multiple copies of the same code, you should use a packing tool like `}<a parentName=\"p\" {...{\n        \"href\": \"https://helm.sh/\"\n      }}>{`Helm`}</a>{` to parametrize your configuration. Instead of having multiple copies of application YAML, you can have a single `}<inlineCode parentName=\"p\">{`values.yaml`}</inlineCode>{` per deployment environment and you can keep them all in a `}<inlineCode parentName=\"p\">{`templates/`}</inlineCode>{` directory at the root of your project. The book doesn't talk about it, but this also gives you the added benefit of building modular, reusable k8s building blocks. These can be shared and leveraged across the company so that teams don't need to reinvent the wheel. `}</p>\n    <hr></hr>\n    <h3><a name=\"developer-workflows\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#developer-workflows\"\n      }}>{`Developer Workflows`}</a></h3>\n    <p>{`When thinking about developer interactions with a development cluster, it can be useful to break it down into three phases:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Onboarding - getting access to the cluster`}</li>\n      <li parentName=\"ol\">{`Developing - getting bootstrapped and able to deploy`}</li>\n      <li parentName=\"ol\">{`Testing - being able to iterate quickly and efficiently`}</li>\n    </ol>\n    <p>{`Generally speaking, it's a best practice to use a single, large cluster for all developers and break it down into namespaces to keep things tidy. There is some additional overhead of managing this cluster as opposed to creating individual clusters per developer, but the increased resource utilization and availability of shared services (e.g., logging) make it worthwhile. When you're operating in this model, it is also a good idea to give everyone read access to the entire cluster. This can help everyone debug in case your neighbor is breaking your deployment or hogging all the resources. However, it's worth noting that the default read access will include Secrets. You can create fine-grain permissions that exclude Secrets if necessary, but it's usually not a problem in a development environment. `}</p>\n    <p>{`It can be extremely useful to automate as much of the namespace management as possible. This could be a script that creates a new namespace, adds users to it, defines the Requests and Limits, and sets a TTL. The idea of a TTL is useful because it helps keep the cluster lean and clean (and helps build good developer habits). You can enforce the TTL by writing a `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/\"\n      }}>{`CronJob`}</a>{` to clean them up. You could also replace the script that instantiates the namespace with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\"\n      }}>{`CRD`}</a>{`!`}</p>\n    <p>{`If your development namespace has a TTL, then you're definitely going to want a script that installs all the necessary dependencies for your project. It is also a best practice to have a script that will delete and recreate your Deployments rather than update them in-place. In a development environment, you want your code changes to rollout quickly, but modifying the k8s rollout logic should only be done with extreme caution - you do not want to create drift between your development and production clusters. `}</p>\n    <hr></hr>\n    <h3><a name=\"telemetry\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#telemetry\"\n      }}>{`Monitoring and Logging in Kubernetes`}</a></h3>\n    <p>{`There are two monitoring paradigms that complement each other and are useful in the context of Kubernetes: `}<strong parentName=\"p\">{`USE`}</strong>{` and `}<strong parentName=\"p\">{`RED`}</strong>{`. `}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`U`}</strong>{` - Utilization`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`S`}</strong>{` - Saturation`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`E`}</strong>{` - Errors`}\n        <p></p>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`R`}</strong>{` - Rate`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`E`}</strong>{` - Errors`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`D`}</strong>{` - Duration`}</li>\n    </ul>\n    <p>{`USE focuses more on the infrastructure, whereas RED focuses on the end-user experience for the application. These patterns should help determine what you monitor, because monitoring everything is counter-productive (poor signal:noise ratio).`}</p>\n    <p>{`Rather than focusing on the details of `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#the-metrics-api\"\n      }}>{`the Metrics API`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kubernetes-sigs/metrics-server\"\n      }}>{`Metrics Server`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kubernetes/kube-state-metrics\"\n      }}>{`kube-state-metrics`}</a>{`, or any of the multitude of monitoring tools available (e.g., `}<a parentName=\"p\" {...{\n        \"href\": \"https://prometheus.io/docs/introduction/overview/\"\n      }}>{`Prometheus`}</a>{`), I'd like to focus on what metrics should be captured. Monitoring should take a layered approach that takes into account the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Physical or virtual nodes`}</li>\n      <li parentName=\"ul\">{`Cluster components`}</li>\n      <li parentName=\"ul\">{`Cluster add-ons`}</li>\n      <li parentName=\"ul\">{`End-user applications`}</li>\n    </ul>\n    <p>{`Given these layers, what metrics should be targeted?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Nodes`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`CPU utilization`}</li>\n          <li parentName=\"ul\">{`Memory utilization`}</li>\n          <li parentName=\"ul\">{`Network utilization`}</li>\n          <li parentName=\"ul\">{`Disk utilization`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Cluster components`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`etcd latency`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Cluster add-ons`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Cluster Autoscaler`}</li>\n          <li parentName=\"ul\">{`Ingress Controller`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Application`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Container memory utilization and saturation`}</li>\n          <li parentName=\"ul\">{`Container CPU utilization`}</li>\n          <li parentName=\"ul\">{`Container network utilization and error rate`}</li>\n          <li parentName=\"ul\">{`Application frame-work specific metrics`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`With regards to logging, there are several components that you will need to capture logs from:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Node logs`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Docker daemon`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Kubernetes control-plane logs`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`API server`}</li>\n          <li parentName=\"ul\">{`Controller manager`}</li>\n          <li parentName=\"ul\">{`Scheduler`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Kubernetes audit logs`}</li>\n      <li parentName=\"ul\">{`Application controller logs`}</li>\n    </ul>\n    <p>{`It is worth mentioning that k8s audit logs can be extremely noisy. It's worth using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/debug-application-cluster/audit/\"\n      }}>{`documentation`}</a>{` to fine-tune them for your environment.`}</p>\n    <p>{`Limit the usage of log forwarders in a sidecar pattern - they consume a lot more resources. Opt for using a DaemonSet for the log forwarder and sending the logs to STDOUT. `}</p>\n    <p>{`The book mentions SRE practices like defining SLOs and measuring them using SLIs, but those methodologies are beyond the scope of the book. They're still best practices though and should be implemented in order to provide a highly available, secure Kubernetes platform. All of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://landing.google.com/sre/books/\"\n      }}>{`Google books on SRE are available for free`}</a>{`. `}</p>\n    <hr></hr>\n    <h3><a name=\"configuration-secrets-and-rbac\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#configuration-secrets-and-rbac\"\n      }}>{`Configuration, Secrets, and RBAC`}</a></h3>\n    <p>{`Generally speaking, the best way to approach any changes to a ConfigMap or Secret is to update the entire Deployment. This is because a change to the configuration object will not trigger an update of the Pods that reference/mount it. It is a best practice to use a version number in the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` of the configuration object and change the `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{` to point at the new version. This will cause all of the Pods to update. It also makes rollback easy.`}</p>\n    <p>{`You can assign an `}<inlineCode parentName=\"p\">{`imagePullSecrets`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`serviceaccount`}</inlineCode>{` that the pod will use to automatically mount the secret without having to declare it in the `}<inlineCode parentName=\"p\">{`pod.spec`}</inlineCode>{`. You can do this to the default service account for the namespace and the secret will be automatically added to all the pods in that namespace. `}</p>\n    <p>{`RBAC has a lot in common with AWS IAM as far as best practices for scope of privilege (TL;DR - use least privilege). I've left out most of the information about RBAC, but it is worth explicitly stating that `}<em parentName=\"p\">{`most`}</em>{` application that run on Kubernetes will `}<strong parentName=\"p\">{`not`}</strong>{` need an RBAC role or role binding. This is because most applications do not directly interact with the k8s API itself. In the case where an application does need to interface with the k8s API, it should use a purpose-specific service account with a least privileged role to execute its goal. `}</p>\n    <hr></hr>\n    <h3><a name=\"cicd\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#cicd\"\n      }}>{`Continuous Integration, Testing, and Deployment`}</a></h3>\n    <p>{`CI/CD, DevOps, GitOps, etc., all deserve and have their own books about them. With regards to best practices for Kubernetes, there will a few specific and salient points that jumped out at me:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Whatever CI/CD tools that you choose must be able to define the pipeline as code. Storing the pipeline in version control alongside the application code is invaluable.`}</li>\n      <li parentName=\"ol\">{`Optimize your container images for size. Smaller images means more efficient development and lower security risk.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`As you mature, you may become comfortable using a `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/GoogleContainerTools/distroless\"\n            }}>{`distroless base image.`}</a></li>\n          <li parentName=\"ul\">{`Use multi-stage builds to slim down containers. A classic example is to build your Go static binary and place only that into the production container - not all the packages that were used to build it.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Do not use the `}<inlineCode parentName=\"strong\">{`latest`}</inlineCode>{` tag!`}</strong>{` Every container image tag should point to a specific version/build of the code.`}</li>\n      <li parentName=\"ol\">{`Kubernetes offers several different deployment strategies. If you're just getting started, rolling deployments are the easiest to use. When using blue/green or canary, be sure to understand the implications for having two versions of your application available - especially as it relates to state and/or hybrid applications.`}</li>\n    </ol>\n    <hr></hr>\n    <h3><a name=\"versioning-releases-and-rollouts\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#versioning-releases-and-rollouts\"\n      }}>{`Versioning, Releases, and Rollouts`}</a></h3>\n    <p>{`Versioning should be a relatively straightforward task, but it's a critical one. There are so many different types of Kubernetes API objects, each with their own version, that making sure everything is properly versioned becomes mission critical in order to enable smooth operations.`}</p>\n    <p>{`As far as rollouts are concerned, it's imperative to understand that changes to the metadata fields of a Deployment will not trigger an update. Only changes to the `}<inlineCode parentName=\"p\">{`spec.template`}</inlineCode>{` will trigger an update. This becomes important as you will have versions for containers, Pods, Deployments, Services, and the application itself - all of which should be distinct from each other.  `}</p>\n    <p>{`Use a release and release version/number in your Deployment metadata. The release name and number should coordinate with the actual release from your CI/CD tooling in order to enable traceability.  `}</p>\n    <p>{`If you're using Helm, be sure to bundle services that need to be rolled back or upgraded together. You can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://helm.sh/docs/topics/charts_hooks/\"\n      }}>{`Helm chart hooks`}</a>{` to make sure that release lifecycle events go smoothly. Chart hooks allow events (e.g., run a Job, mount a ConfigMap, etc.) to be triggered at specific times in the release lifecycle (e.g., `}<inlineCode parentName=\"p\">{`pre-install`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`post-rollback`}</inlineCode>{`, etc.)`}</p>\n    <hr></hr>\n    <h3><a name=\"distribution-and-staging\"></a>{` `}<a parentName=\"h3\" {...{\n        \"href\": \"#distribution-and-staging\"\n      }}>{`Worldwide Application Distribution and Staging`}</a></h3>\n    <p>{`Starting with the fundamentals, it's imperative to have your container images distributed to each region that your workload is running in. This helps to make rollouts more reliable by avoiding any networking issues that may crop up.`}</p>\n    <p>{`Global rollouts should be preceded by rigorous integration testing. Ideally, you will have a copy of your production data available for this - try to think ahead `}<em parentName=\"p\">{`before`}</em>{` you're scaled up. Setting up good integration testing is easier early on in the development of an application and it pays serious dividends in the long run. Load-testing should also be performed. Replaying the logged traffic is a good starting point, but not always fool-proof.`}</p>\n    <p>{`Once you're ready to begin the rollout, a canary region should be selected and deployed to. Your customers will use this region as a preproduction environment to validate `}<em parentName=\"p\">{`their`}</em>{` use of your service before continuing the rollout. Generally speaking, a decent rule of thumb is to leave this deployment in the canary region for double the average time-to-smoke. `}</p>\n    <p>{`Lastly, be sure to document and `}<strong parentName=\"p\">{`practice`}</strong>{` your response to any problems or processes that you encounter. There should be runbooks for everything you need to do - nothing should be done from memory. `}</p>\n    <hr></hr>\n    <h3><a name=\"resource-management\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#resource-management\"\n      }}>{`Resource Management`}</a></h3>\n    <p>{`Both the general guidelines and the specific implementations of resource management depend on the workload and the underlying hardware it requires. Any specialized hardware (e.g., GPUs) should be accessed with taints and/or nodeSelectors. Use nodeSelectors when you want to `}<em parentName=\"p\">{`request`}</em>{` specialized hardware and use taints when you want to `}<em parentName=\"p\">{`reserve`}</em>{` it. If you're running multiple workloads with different performance requirements, be sure to include a mix of node pools with different instance types. If those workloads are variable or have unexpected spikes in usage, consider using the Horizontal Pod Autoscaler. `}</p>\n    <p>{`As far as Pods go, everything should have its Requests and Limits defined. If a Pod's Requests and Limits are equal, the Pod will receive a `}<em parentName=\"p\">{`guaranteed`}</em>{` Quality of Service (QoS) class. This is partly why it's recommended to set them equal when you're getting started on your k8s journey. However, guaranteed QoS requires that Requests and Limits are set `}<em parentName=\"p\">{`for all containers in a Pod`}</em>{`. `}</p>\n    <p>{`Additionally, use PodDisruptionBudgets to manage how many Pods are (un)available during a disruption. This, in congruence with (anti-)affinity attributes, can ensure that your service remains highly available through out operations and outages. `}</p>\n    <hr></hr>\n    <h3><a name=\"networking\"></a><a parentName=\"h3\" {...{\n        \"href\": \"#networking\"\n      }}>{`Networking, Network Security, and Service Mesh`}</a></h3>\n    <p>{`Probably the single most important decision around networking is what Container Network Interface to use. This deserves its own article. The chosen CNI should deliver the feature set required, be compatible with your control plane (particularly important when consuming a managed service like AWS EKS), and be compatible with your network observability, management, and security tooling. And, if you choose to use a CNI that does not over a network overlay, you'll need to make sure that you have enough CIDR to handle node IPs, Pod IPs, load balancers, and wiggle room for rollouts and scaling. `}</p>\n    <p>{`The next big decision to make is the choice of Ingress controller. Just like choosing a CNI, a thorough investiation of feature set and compatability needs to be performed. Standardize the chosen Ingress controller across the enterpise because many of the specific configuration annotations vary between implementations. If you aren't consistent, your workloads won't be portable. `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}