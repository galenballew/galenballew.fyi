{"expireTime":9007200864531304000,"key":"gatsby-plugin-mdx-entire-payload-d959d058e114d0ca374815fc4dd5b1d4-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Abstract","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":11,"offset":11},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":11,"offset":11},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This post is a quick summary of 6 common migration strategies that Amazon observes from its customers. You can read the original post ","position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":135,"offset":147},"indent":[]}},{"type":"link","title":null,"url":"https://aws.amazon.com/blogs/enterprise-strategy/6-strategies-for-migrating-applications-to-the-cloud/","children":[{"type":"text","value":"here","position":{"start":{"line":4,"column":136,"offset":148},"end":{"line":4,"column":140,"offset":152},"indent":[]}}],"position":{"start":{"line":4,"column":135,"offset":147},"end":{"line":4,"column":245,"offset":257},"indent":[]}},{"type":"text","value":". It's part of a series of posts about cloud migration. ","position":{"start":{"line":4,"column":245,"offset":257},"end":{"line":4,"column":301,"offset":313},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":301,"offset":313},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":6,"column":1,"offset":315},"end":{"line":6,"column":4,"offset":318},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Six R's","position":{"start":{"line":8,"column":3,"offset":322},"end":{"line":8,"column":14,"offset":333},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":320},"end":{"line":8,"column":14,"offset":333},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1. Rehosting","position":{"start":{"line":10,"column":4,"offset":338},"end":{"line":10,"column":16,"offset":350},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":335},"end":{"line":10,"column":16,"offset":350},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"lift-and-shift\"","position":{"start":{"line":11,"column":6,"offset":356},"end":{"line":11,"column":26,"offset":376},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":351},"end":{"line":11,"column":26,"offset":376},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rehosting does not take advantage of any cloud-native capabilities. It is simply running your existing legacy app on cloud infrastructure. Most rehosting can be done using automated tools, however a manual migration can be useful to learn how to apply the workload in the new cloud environment. Additionally, applications are often easier to optimize or re-architect once they are already running in the cloud. This party because of people, talent, and process and also partly because migration of the application, data, and traffic is already done (the hard part). ","position":{"start":{"line":12,"column":1,"offset":377},"end":{"line":12,"column":567,"offset":943},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":377},"end":{"line":12,"column":567,"offset":943},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"2. Replatforming","position":{"start":{"line":14,"column":4,"offset":948},"end":{"line":14,"column":20,"offset":964},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":945},"end":{"line":14,"column":20,"offset":964},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"lift-tinker-and-shift\"","position":{"start":{"line":15,"column":6,"offset":970},"end":{"line":15,"column":33,"offset":997},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":965},"end":{"line":15,"column":33,"offset":997},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Replatforming conserves the core architecture of an application, but leverages some cloud capabilities. An example might be replacing a database instance in your data center with a database-as-a-service platform that handles some of the operational load. Another example might be replacing queue or pub/sub service with AWS SQS. ","position":{"start":{"line":16,"column":1,"offset":998},"end":{"line":16,"column":330,"offset":1327},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":998},"end":{"line":16,"column":330,"offset":1327},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3. Repurchasing","position":{"start":{"line":18,"column":4,"offset":1332},"end":{"line":18,"column":19,"offset":1347},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1329},"end":{"line":18,"column":19,"offset":1347},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"pay someone else to do it better, for less\"","position":{"start":{"line":19,"column":6,"offset":1353},"end":{"line":19,"column":54,"offset":1401},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1348},"end":{"line":19,"column":54,"offset":1401},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This strategy is when companies move to a SaaS platform. Common examples are moving your CMR to Salesforce or an HR system to Workday.","position":{"start":{"line":20,"column":1,"offset":1402},"end":{"line":20,"column":135,"offset":1536},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1402},"end":{"line":20,"column":135,"offset":1536},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4. Refactoring / Re-architecting","position":{"start":{"line":22,"column":4,"offset":1541},"end":{"line":22,"column":36,"offset":1573},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1538},"end":{"line":22,"column":36,"offset":1573},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"harder, better, faster, stronger\"","position":{"start":{"line":23,"column":6,"offset":1579},"end":{"line":23,"column":44,"offset":1617},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1574},"end":{"line":23,"column":44,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This strategy is a full blown re-imagination of the applications core architecture. It's usually driven by business needs for new features, scale, or performance that are not feasible on-premise. It can also be part of a larger strategic initiative like shifting towards portable workloads (containers), container management platforms such as Kubernetes (I like to think of them as abstracted-compute platforms), and multi-cloud or multi-data center postures. ","position":{"start":{"line":24,"column":1,"offset":1618},"end":{"line":24,"column":461,"offset":2078},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1618},"end":{"line":24,"column":461,"offset":2078},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"5. Retire","position":{"start":{"line":26,"column":4,"offset":2083},"end":{"line":26,"column":13,"offset":2092},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2080},"end":{"line":26,"column":13,"offset":2092},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"goodbye and farewell\"","position":{"start":{"line":27,"column":6,"offset":2098},"end":{"line":27,"column":32,"offset":2124},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2093},"end":{"line":27,"column":32,"offset":2124},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sometimes it's the better business decision to shut down an application entirely. The resources (people, money, compute) freed up from this can be put to better use. ","position":{"start":{"line":28,"column":1,"offset":2125},"end":{"line":28,"column":167,"offset":2291},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2125},"end":{"line":28,"column":167,"offset":2291},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"6. Retain","position":{"start":{"line":30,"column":4,"offset":2296},"end":{"line":30,"column":13,"offset":2305},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2293},"end":{"line":30,"column":13,"offset":2305},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"AKA \"kick the can down the road\"","position":{"start":{"line":31,"column":6,"offset":2311},"end":{"line":31,"column":38,"offset":2343},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2306},"end":{"line":31,"column":38,"offset":2343},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Randy Pausch said \"Never make a decision until you have to.\" If an application does not meet the bar for taking action via one of the other five migration strategies, it will be retained. ","position":{"start":{"line":32,"column":1,"offset":2344},"end":{"line":32,"column":189,"offset":2532},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2344},"end":{"line":32,"column":189,"offset":2532},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"The 6 Rs of Cloud Migration\",\"date\":\"2019-04-24T00:00:00.000Z\",\"excerpt\":\"TL;DR on this AWS blog post.\",\"categories\":[\"tldr\",\"cloud\"],\"tags\":[\"tldr\",\"cloud\",\"aws\"],\"featured_image\":\"/images/feature/7.jpg\",\"comments\":true,\"share\":true}","position":{"start":{"line":36,"column":1,"offset":2536},"end":{"line":36,"column":273,"offset":2808},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":273,"offset":2808}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The 6 Rs of Cloud Migration\",\n  \"date\": \"2019-04-24T00:00:00.000Z\",\n  \"excerpt\": \"TL;DR on this AWS blog post.\",\n  \"categories\": [\"tldr\", \"cloud\"],\n  \"tags\": [\"tldr\", \"cloud\", \"aws\"],\n  \"featured_image\": \"/images/feature/7.jpg\",\n  \"comments\": true,\n  \"share\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Abstract\"), mdx(\"p\", null, \"This post is a quick summary of 6 common migration strategies that Amazon observes from its customers. You can read the original post \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws.amazon.com/blogs/enterprise-strategy/6-strategies-for-migrating-applications-to-the-cloud/\"\n  }), \"here\"), \". It's part of a series of posts about cloud migration. \"), mdx(\"hr\", null), mdx(\"h1\", null, \"The Six R's\"), mdx(\"h2\", null, \"1. Rehosting\"), mdx(\"h4\", null, \"AKA \\\"lift-and-shift\\\"\"), mdx(\"p\", null, \"Rehosting does not take advantage of any cloud-native capabilities. It is simply running your existing legacy app on cloud infrastructure. Most rehosting can be done using automated tools, however a manual migration can be useful to learn how to apply the workload in the new cloud environment. Additionally, applications are often easier to optimize or re-architect once they are already running in the cloud. This party because of people, talent, and process and also partly because migration of the application, data, and traffic is already done (the hard part). \"), mdx(\"h2\", null, \"2. Replatforming\"), mdx(\"h4\", null, \"AKA \\\"lift-tinker-and-shift\\\"\"), mdx(\"p\", null, \"Replatforming conserves the core architecture of an application, but leverages some cloud capabilities. An example might be replacing a database instance in your data center with a database-as-a-service platform that handles some of the operational load. Another example might be replacing queue or pub/sub service with AWS SQS. \"), mdx(\"h2\", null, \"3. Repurchasing\"), mdx(\"h4\", null, \"AKA \\\"pay someone else to do it better, for less\\\"\"), mdx(\"p\", null, \"This strategy is when companies move to a SaaS platform. Common examples are moving your CMR to Salesforce or an HR system to Workday.\"), mdx(\"h2\", null, \"4. Refactoring / Re-architecting\"), mdx(\"h4\", null, \"AKA \\\"harder, better, faster, stronger\\\"\"), mdx(\"p\", null, \"This strategy is a full blown re-imagination of the applications core architecture. It's usually driven by business needs for new features, scale, or performance that are not feasible on-premise. It can also be part of a larger strategic initiative like shifting towards portable workloads (containers), container management platforms such as Kubernetes (I like to think of them as abstracted-compute platforms), and multi-cloud or multi-data center postures. \"), mdx(\"h2\", null, \"5. Retire\"), mdx(\"h4\", null, \"AKA \\\"goodbye and farewell\\\"\"), mdx(\"p\", null, \"Sometimes it's the better business decision to shut down an application entirely. The resources (people, money, compute) freed up from this can be put to better use. \"), mdx(\"h2\", null, \"6. Retain\"), mdx(\"h4\", null, \"AKA \\\"kick the can down the road\\\"\"), mdx(\"p\", null, \"Randy Pausch said \\\"Never make a decision until you have to.\\\" If an application does not meet the bar for taking action via one of the other five migration strategies, it will be retained. \"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"The 6 Rs of Cloud Migration\",\n  \"date\": \"2019-04-24T00:00:00.000Z\",\n  \"excerpt\": \"TL;DR on this AWS blog post.\",\n  \"categories\": [\"tldr\", \"cloud\"],\n  \"tags\": [\"tldr\", \"cloud\", \"aws\"],\n  \"featured_image\": \"/images/feature/7.jpg\",\n  \"comments\": true,\n  \"share\": true\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Abstract`}</h1>\n    <p>{`This post is a quick summary of 6 common migration strategies that Amazon observes from its customers. You can read the original post `}<a parentName=\"p\" {...{\n        \"href\": \"https://aws.amazon.com/blogs/enterprise-strategy/6-strategies-for-migrating-applications-to-the-cloud/\"\n      }}>{`here`}</a>{`. It's part of a series of posts about cloud migration. `}</p>\n    <hr></hr>\n    <h1>{`The Six R's`}</h1>\n    <h2>{`1. Rehosting`}</h2>\n    <h4>{`AKA \"lift-and-shift\"`}</h4>\n    <p>{`Rehosting does not take advantage of any cloud-native capabilities. It is simply running your existing legacy app on cloud infrastructure. Most rehosting can be done using automated tools, however a manual migration can be useful to learn how to apply the workload in the new cloud environment. Additionally, applications are often easier to optimize or re-architect once they are already running in the cloud. This party because of people, talent, and process and also partly because migration of the application, data, and traffic is already done (the hard part). `}</p>\n    <h2>{`2. Replatforming`}</h2>\n    <h4>{`AKA \"lift-tinker-and-shift\"`}</h4>\n    <p>{`Replatforming conserves the core architecture of an application, but leverages some cloud capabilities. An example might be replacing a database instance in your data center with a database-as-a-service platform that handles some of the operational load. Another example might be replacing queue or pub/sub service with AWS SQS. `}</p>\n    <h2>{`3. Repurchasing`}</h2>\n    <h4>{`AKA \"pay someone else to do it better, for less\"`}</h4>\n    <p>{`This strategy is when companies move to a SaaS platform. Common examples are moving your CMR to Salesforce or an HR system to Workday.`}</p>\n    <h2>{`4. Refactoring / Re-architecting`}</h2>\n    <h4>{`AKA \"harder, better, faster, stronger\"`}</h4>\n    <p>{`This strategy is a full blown re-imagination of the applications core architecture. It's usually driven by business needs for new features, scale, or performance that are not feasible on-premise. It can also be part of a larger strategic initiative like shifting towards portable workloads (containers), container management platforms such as Kubernetes (I like to think of them as abstracted-compute platforms), and multi-cloud or multi-data center postures. `}</p>\n    <h2>{`5. Retire`}</h2>\n    <h4>{`AKA \"goodbye and farewell\"`}</h4>\n    <p>{`Sometimes it's the better business decision to shut down an application entirely. The resources (people, money, compute) freed up from this can be put to better use. `}</p>\n    <h2>{`6. Retain`}</h2>\n    <h4>{`AKA \"kick the can down the road\"`}</h4>\n    <p>{`Randy Pausch said \"Never make a decision until you have to.\" If an application does not meet the bar for taking action via one of the other five migration strategies, it will be retained. `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}